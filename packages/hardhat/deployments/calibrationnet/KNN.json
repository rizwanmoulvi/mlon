{
  "address": "0xECa5aEb36CB20Ba4c4346450cCeF53469906A511",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "row",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        },
        {
          "internalType": "enum KNN.Distance",
          "name": "distance",
          "type": "uint8"
        }
      ],
      "name": "getKNN",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "analyticsData",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "row",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        },
        {
          "internalType": "enum KNN.Distance",
          "name": "distance",
          "type": "uint8"
        }
      ],
      "name": "getKNNOffChainData",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        }
      ],
      "name": "getRecommendedSimilarUsers",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "",
          "type": "address[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][]",
          "name": "similarityMatrix",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        }
      ],
      "name": "recommend",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "",
          "type": "address[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCategories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userActivityMatrix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00f69e480787e0b4f1fa337fde2c78218865de4d9d5badd4c22216d8d6f2cd9b",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xECa5aEb36CB20Ba4c4346450cCeF53469906A511",
    "transactionIndex": 2,
    "gasUsed": "79741663",
    "logsBloom": "0xffeffffffffffffffdfffff77ffff7fefffffffffef7efbe7ffffffffffffbdffffffdfd7fffeffbf7dfffffff7bffffffbfffffffffdfedffbfdffffefffffffffffffeefdfffdf6ffffdfffbffff3efeffefff7feeffffefffffbffffffff9ffffffffdffff7fff7fffffeffffff7bfffeeeff7fffffffffbf7dffffbfffffbfffffffdfffdfffc7fffffffdfefed7ffffffffffffdfbf7ffffefffffffffbbffffe7fffffbfff7ff3ffffffcfbff3ffffeffffffffbfffffeefffffffffeffffffffffffdfffffffefffffbfffffdbf7feffdffffefffffefbbbffeffffd7ffffffdff7fffff7fffdff7fefffffffefff7ffffffffbfffffffeffffffffff",
    "blockHash": "0x8113efca134ea5fe23a8ac7fe34973bf3ab0a0abf65f79e6985800823449be79",
    "transactionHash": "0x00f69e480787e0b4f1fa337fde2c78218865de4d9d5badd4c22216d8d6f2cd9b",
    "logs": [],
    "blockNumber": 1640835,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD905BD593fD603F4309CB686f9a11DC881483e1"
  ],
  "numDeployments": 1,
  "solcInputHash": "9471fd72183e1372e64a62ad6ee06773",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"row\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"enum KNN.Distance\",\"name\":\"distance\",\"type\":\"uint8\"}],\"name\":\"getKNN\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"analyticsData\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"row\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"enum KNN.Distance\",\"name\":\"distance\",\"type\":\"uint8\"}],\"name\":\"getKNNOffChainData\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"}],\"name\":\"getRecommendedSimilarUsers\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"similarityMatrix\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"}],\"name\":\"recommend\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCategories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userActivityMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KNN.sol\":\"KNN\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x018bc280bd319aeeb71d64238d8876969c7b42663df00fff356b1d02692d4b51\",\"license\":\"MIT\"},\"contracts/KNN.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract KNN {\\n\\n  DataLayer dataLayer;\\n  uint256[][] public userActivityMatrix;\\n  uint256 public totalCategories;\\n\\n  enum Distance {\\n\\t\\tEuclidean,\\n    Cosine\\n\\t}\\n\\n  struct similarityPair {\\n\\t\\tuint256 index;\\n\\t\\tuint256 similarity;\\n\\t}\\n\\n  constructor(DataLayer _dataLayer) {\\n    dataLayer = _dataLayer;\\n    userActivityMatrix = dataLayer.getUserActivityMatrix();\\n    totalCategories = dataLayer.totalCategories();\\n  }\\n\\n  // Get KNN of any schema row\\n  function getKNN(bytes32 schemaName, uint256[] memory row, uint64 k, Distance distance) external view returns(uint256[][] memory) {\\n    uint256[][] memory analyticsData = dataLayer.getAnalyticsDataBySchemaName(schemaName);\\n\\n    uint256[] memory similarityArray = computeSimilarityArray(analyticsData, row, distance);\\n\\n    uint256[][] memory predictions = getKNN(similarityArray, analyticsData, k);\\n\\n    return predictions;\\n  }\\n\\n  // Get KNN of offchain data\\n  function getKNNOffChainData(uint256[][] memory analyticsData, uint256[] memory row, uint64 k, Distance distance) external pure returns(uint256[][] memory) {\\n\\n    uint256[] memory similarityArray = computeSimilarityArray(analyticsData, row, distance);\\n\\n    uint256[][] memory predictions = getKNN(similarityArray, analyticsData, k);\\n\\n    return predictions;\\n  }\\n\\n  function getRecommendedSimilarUsers(\\n\\t\\taddress userAddress,\\n\\t\\tuint64 k\\n\\t) external view returns (address[][] memory) {\\n\\t\\tuint256[][] memory similarityMatrix = computeUserSimilarityMatrix();\\n\\n\\t\\taddress[][] memory recommendedFollowers = recommend(\\n\\t\\t\\tdataLayer.addressToId(userAddress),\\n\\t\\t\\tsimilarityMatrix,\\n\\t\\t\\tk\\n\\t\\t);\\n\\n\\t\\treturn recommendedFollowers;\\n\\t}\\n\\n  // Function to compute similarity matrix\\n\\tfunction computeSimilarityArray(uint256[][] memory inputData, uint256[] memory test_row, Distance distance)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\tuint256 numRows = inputData.length;\\n\\t\\tuint256[] memory similarityMatrix = new uint256[](numRows);\\n\\n\\t\\t// similarityMatrix.push();\\n\\t\\tfor (uint256 i = 1; i < numRows; i++) {\\n\\t\\t\\tuint256[] memory row = inputData[i];\\n      if (distance == Distance.Cosine) {\\n        similarityMatrix[i] = cosineDistance(row, test_row);\\n      } else {\\n        similarityMatrix[i] = euclideanDistance(row, test_row);\\n      }\\n      \\n\\t\\t}\\n\\n\\t\\treturn similarityMatrix;\\n\\t}\\n\\n\\n\\t// Function to compute user-user similarity matrix\\n\\tfunction computeUserSimilarityMatrix()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\tuint256 numUsers = userActivityMatrix.length;\\n\\t\\tuint256[][] memory similarityMatrix = new uint256[][](numUsers);\\n\\n\\t\\t// similarityMatrix.push();\\n\\t\\tfor (uint256 i = 1; i < numUsers; i++) {\\n\\t\\t\\tuint256[] memory row = new uint256[](numUsers);\\n\\t\\t\\tsimilarityMatrix[i] = row;\\n\\n\\t\\t\\tfor (uint64 j = 1; j < numUsers; j++) {\\n\\t\\t\\t\\tuint256[] memory user1 = userActivityMatrix[i];\\n\\t\\t\\t\\tuint256[] memory user2 = userActivityMatrix[j];\\n\\t\\t\\t\\tsimilarityMatrix[i][j] = cosineDistance(user1, user2);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn similarityMatrix;\\n\\t}\\n\\n  // Function to recommend similar users for a given user\\n\\tfunction getKNN(\\n\\t\\tuint256[] memory similarityArray,\\n    uint256[][] memory inputData,\\n\\t\\tuint64 k\\n\\t) internal pure returns (uint256[][] memory) {\\n\\t\\tsimilarityPair[] memory similarRows = new similarityPair[](\\n\\t\\t\\tsimilarityArray.length - 1\\n\\t\\t);\\n\\t\\tuint256 idx = 0;\\n\\n\\t\\t// Find k most similar users to the target user\\n\\t\\tfor (uint256 j = 1; j < similarityArray.length; j++) {\\t\\n\\t\\t\\tsimilarityPair memory row;\\n\\t\\t\\trow.index = j;\\n\\t\\t\\trow.similarity = similarityArray[j];\\n\\t\\t\\tsimilarRows[idx] = row;\\n\\t\\t\\tidx += 1;\\n\\t\\t}\\n\\n\\t\\t// Sort similar users by descending similarity\\n\\t\\tsimilarRows = bubbleSort(similarRows);\\n\\n\\t\\t// Recommend followers from the top k similar users\\n\\t\\tuint256[][] memory recommendations = new uint256[][](\\n\\t\\t\\tk\\n\\t\\t);\\n\\t\\tfor (uint64 i = 0; i < k; i++) {\\n      uint256[] memory row = new uint256[](inputData[similarRows[i].index].length);\\n      recommendations[i] = row;\\n      for (uint256 j = 0; j < inputData[similarRows[i].index].length; j++) {\\n        recommendations[i][j] = inputData[similarRows[i].index][j];\\n      }\\n\\t\\t}\\n\\n\\t\\treturn recommendations;\\n\\t}\\n\\n\\n\\t// Function to recommend similar users for a given user\\n\\tfunction recommend(\\n\\t\\tuint256 userIndex,\\n\\t\\tuint256[][] memory similarityMatrix,\\n\\t\\tuint64 k\\n\\t) public view returns (address[][] memory) {\\n\\t\\tsimilarityPair[] memory similarUsers = new similarityPair[](\\n\\t\\t\\tsimilarityMatrix[userIndex].length - 1\\n\\t\\t);\\n\\t\\tuint256 idx = 0;\\n\\n\\t\\t// Find k most similar users to the target user\\n\\t\\tfor (uint256 j = 1; j < similarityMatrix[userIndex].length; j++) {\\n\\t\\t\\tif (j != userIndex) {\\n\\t\\t\\t\\tsimilarityPair memory row;\\n\\t\\t\\t\\trow.index = j;\\n\\t\\t\\t\\trow.similarity = similarityMatrix[userIndex][j];\\n\\t\\t\\t\\tsimilarUsers[idx] = row;\\n\\t\\t\\t\\tidx += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Sort similar users by descending similarity\\n\\t\\tsimilarUsers = bubbleSort(similarUsers);\\n\\n\\t\\t// Recommend followers from the top k similar users\\n\\t\\taddress[][] memory recommendedFollowers = new address[][](\\n\\t\\t\\ttotalCategories\\n\\t\\t);\\n\\t\\tfor (uint64 i = 0; i < k; i++) {\\n\\t\\t\\tuint64 _idx = 0;\\n\\t\\t\\tfor (uint256 j = 0; j < totalCategories; j++) {\\n\\t\\t\\t\\taddress[] memory followerRow = new address[](k);\\n\\t\\t\\t\\trecommendedFollowers[j] = followerRow;\\n\\t\\t\\t\\tif (userActivityMatrix[similarUsers[i].index][j] > 0) {\\n\\t\\t\\t\\t\\trecommendedFollowers[j][_idx] = dataLayer.idToAddress(\\n\\t\\t\\t\\t\\t\\tsimilarUsers[i].index\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t_idx = _idx + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn recommendedFollowers;\\n\\t}\\n\\n  /**\\n   * @dev Function to calculate cosine distance between two rows\\n   */\\n\\tfunction cosineDistance(\\n\\t\\tuint256[] memory row1,\\n\\t\\tuint256[] memory row2\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 dotProduct = dot(row1, row2);\\n\\t\\tuint256 normRow1 = sqrt(dot(row1, row1));\\n\\t\\tuint256 normRow2 = sqrt(dot(row2, row2));\\n\\t\\treturn ((dotProduct * 10000) / (normRow1 * normRow2));\\n\\t}\\n\\n  /**\\n   * \\n   * @dev Function to calculate euclidean distance between two rows\\n   */\\n  function euclideanDistance(\\n    uint256[] memory row1,\\n    uint256[] memory row2\\n  ) internal pure returns (uint256) {\\n    uint256 sum = 0;\\n    for (uint256 i = 0; i < row1.length; i++) {\\n      if(row1[i] > row2[i]) {\\n        sum += (row1[i] - row2[i])**2;\\n      } else {\\n        sum += (row2[i] - row1[i])**2;\\n      }\\n      \\n    }\\n\\n    return sqrt(sum);\\n  } \\n\\n  \\n\\t/**\\n\\t * @dev Bubble sort.\\n\\t */\\n\\tfunction bubbleSort(\\n\\t\\tsimilarityPair[] memory similarUsers\\n\\t) internal pure returns (similarityPair[] memory) {\\n\\t\\tuint256 n = similarUsers.length;\\n\\t\\tfor (uint256 i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < n - i - 1; j++) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tsimilarUsers[j].similarity > similarUsers[j + 1].similarity\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t(similarUsers[j], similarUsers[j + 1]) = (\\n\\t\\t\\t\\t\\t\\tsimilarUsers[j + 1],\\n\\t\\t\\t\\t\\t\\tsimilarUsers[j]\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn similarUsers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the square root of a number.\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256) {\\n\\t\\tuint256 z = (x + 1) / 2;\\n\\t\\tuint256 y = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = ((x / z) + z) / 2;\\n\\t\\t}\\n\\t\\treturn y;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the dot product of two vectors.\\n\\t */\\n\\tfunction dot(\\n\\t\\tuint256[] memory x,\\n\\t\\tuint256[] memory y\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(x.length == y.length);\\n\\n\\t\\tuint256 output;\\n\\t\\tfor (uint256 i = 0; i < x.length; i++) {\\n\\t\\t\\toutput = (x[i] * y[i]) + output;\\n\\t\\t}\\n\\n\\t\\treturn output;\\n\\t}\\n}\",\"keccak256\":\"0x9d45d68d7ceb8f1a3be5263c63d6f3d3cb5272bb8de4797a5d2ea4e7047bad2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346200013a57602081620015948038038091620000238285620003c9565b8339810103126200013a57516001600160a01b038116908190036200013a57600080546001600160a01b031916821781556040516306be2b4160e01b81526004929091908290849082905afa90811562000148576000916200027d575b508051680100000000000000008082116200026857600192835483855580841062000206575b5060200190836000526020600020906000925b8484106200015457600054604051631c93ad8560e11b81529060209082908a9082906001600160a01b03165afa90811562000148576000916200010b575b5060025560405161117890816200041c8239f35b90506020813d6020116200013f575b816200012960209383620003c9565b810103126200013a575181620000f7565b600080fd5b3d91506200011a565b6040513d6000823e3d90fd5b80518051906001600160401b038211620001f157838211620001f1578454828655808310620001c3575b5090602088920185600052602060002060005b838110620001ae57505050506020819201930193019291620000b9565b8251828201558a946020909301920162000191565b856000528883602060002092830192015b828110620001e45750506200017e565b60008155018990620001d4565b604189634e487b7160e01b6000525260246000fd5b846000528484602060002092830192015b82811062000227575050620000a6565b805460008255806200023e575b5001859062000217565b816000526020600020908101905b8181106200025b575062000234565b600081558893016200024c565b604184634e487b7160e01b6000525260246000fd5b90503d806000833e620002918183620003c9565b60208282810103126200013a5781516001600160401b0381116200013a57818301601f8285010112156200013a5780830151620002ce8162000403565b93620002de6040519586620003c9565b818552602085019084810160208460051b8684010101116200013a57602084820101915b60208460051b8684010101831062000321575050505050503862000080565b82516001600160401b0381116200013a57868301603f82888601010112156200013a57602081878501010151620003588162000403565b91620003686040519384620003c9565b818352602083019089860160408460051b838c8a01010101116200013a576040818a88010101915b60408460051b838c8a010101018310620003b857505050908252506020928301920162000302565b825181526020928301920162000390565b601f909101601f19168101906001600160401b03821190821017620003ed57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111620003ed5760051b6020019056fe6040608081526004908136101561001557600080fd5b6000803560e01c8063193ba7b41461034c5780631e2a861b146102c55780632a45e1ed1461025857806339275b0a146102395780634accf88b146100bb5763cf853e191461006257600080fd5b346100b85760603660031901126100b857602435906001600160401b0382116100b857506100b49261009a6100a9923690830161065b565b6100a26105b3565b9135610c0a565b905191829182610740565b0390f35b80fd5b5091346102355781600319360112610235576001600160a01b0381358181169491929085900361023157602435946001600160401b0393848716870361022d5760019485549561010a8761098e565b96815b8181106101965750505050906024602092855416938751948593849263cb0e0d7d60e01b84528301525afa91821561018b578092610155575b6100b4856100a9888787610c0a565b9091506020823d8211610183575b8161017060209383610502565b810103126100b8575051816100b4610146565b3d9150610163565b8451903d90823e3d90fd5b61019f826107dc565b6101a9828b610833565b526101b4818a610833565b508280805b6101ce575b50506101c99061080e565b61010d565b8a86821685811015610226579061021a61022093926102148761020e6101fc6101f6836106db565b506109dd565b6102086101f6896106db565b90610ed4565b94610833565b51610833565b526109c5565b816101b9565b50506101be565b8380fd5b5080fd5b8280fd5b5090346102315781600319360112610231576020906002549051908152f35b50913461023557816003193601126102355735916024359260015481101561023157600182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019081548410156100b857506020926102b791610728565b91905490519160031b1c8152f35b509134610235576080366003190112610235576001600160401b038135818111610348576102f6903690840161065b565b916024359182116103485761030d91369101610550565b926103166105b3565b936064359160028310156100b85750916103386100b4959261033d9483610847565b610abf565b9051918291826105c9565b8480fd5b509134610235576080366003190112610235576001600160401b03926024358481116102315761037f9036908401610550565b6103876105b3565b946064359260028410156100b85780548651630596815760e21b81528635968101969096528190869060249082906001600160a01b03165afa9485156104f65781956103e2575b6100b48761033d8a896103388a8a83610847565b90919294503d8083833e6103f68183610502565b8101602091828183031261022d5780519085821161034857019080601f8301121561022d5781519061042782610539565b956104348a519788610502565b828752848088019360051b850101938285116104f257858101935b858510610473575050505050505050916103386100b4959261033d819497506103ce565b84518381116104ee57820184603f820112156104ee5780888e92015161049881610539565b926104a581519485610502565b8184528a84019160051b830101918783116104ea57918f8b94929593015b8181106104da57505082935081520194019361044f565b80518652948401948b94016104c3565b8b80fd5b8880fd5b8680fd5b508551903d90823e3d90fd5b90601f801991011681019081106001600160401b0382111761052357604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116105235760051b60200190565b81601f820112156105ae5780359161056783610539565b926105756040519485610502565b808452602092838086019260051b8201019283116105ae578301905b82821061059f575050505090565b81358152908301908301610591565b600080fd5b604435906001600160401b03821682036105ae57565b602080820190808352835180925260408301928160408460051b830101950193600080925b8584106105ff575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b8082106106425750505090806001929901940194019295949391906105ee565b9193806001929486518152019401920188939291610622565b9080601f830112156105ae5781359061067382610539565b926106816040519485610502565b828452602092838086019160051b830101928084116105ae57848301915b8483106106af5750505050505090565b82356001600160401b0381116105ae5786916106d084848094890101610550565b81520192019161069f565b6001548110156107125760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156107125760005260206000200190600090565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410610776575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b8082106107b9575050509080600192990194019401929594939190610765565b82516001600160a01b031684528994938401939092019160019190910190610799565b906107e682610539565b6107f36040519182610502565b8281528092610804601f1991610539565b0190602036910137565b600019811461081d5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156107125760209160051b010190565b9190825190610855826107dc565b93600190815b84811061086b5750505050505090565b6108758183610833565b5190600287101561095c57848785036108aa57610895906108a593610ed4565b61089f828a610833565b5261080e565b61085b565b5090836000918183925b6108c9575b505050906108956108a5926110b9565b90919282518410156109545761092d906108e38585610833565b516108ee868b610833565b511015610935576109279061092161091c8b6109158961090e818b610833565b5192610833565b5190610a2c565b610f28565b90610ab2565b9361080e565b9190806108b4565b6109279061092161091c610949888d610833565b516109158989610833565b9250806108b9565b60246000634e487b7160e01b81526021600452fd5b60005b82811061098057505050565b606082820152602001610974565b906109c361099b83610539565b6109a86040519182610502565b838152602081946109bb601f1991610539565b019101610971565b565b6001600160401b0380911690811461081d5760010190565b9060405191828154918282526020928383019160005283600020936000905b828210610a12575050506109c392500383610502565b8554845260019586019588955093810193909101906109fc565b9190820391821161081d57565b60405190604082018281106001600160401b038211176105235760405260006020838281520152565b90610a6c82610539565b610a796040519182610502565b8281528092610a8a601f1991610539565b019060005b828110610a9b57505050565b602090610aa6610a39565b82828501015201610a8f565b9190820180921161081d57565b8051929392600019810190811161081d57610ad990610a62565b916000946001955b8351871015610b3657610af2610a39565b878152610aff8886610833565b516020820152610b0f8287610833565b52610b1a8186610833565b506001810180911161081d57610b30909661080e565b95610ae1565b5094509291610b459150610fea565b916001600160401b0380941692610b5b8461098e565b926000945b8686169681881015610bff57610b8b610b84610b7c8a87610833565b515187610833565b51516107dc565b610b958988610833565b52610ba08887610833565b5060005b610bb1610b7c8a87610833565b5151811015610beb5780610bd7610be692610214610bcf8d8a610833565b51518a610833565b5161089f826102148d8c610833565b610ba4565b5095610bf89197506109c5565b9495610b60565b505094505050905090565b90610c158282610833565b5151600019810190811161081d57610c2c90610a62565b9160009460015b610c3d8385610833565b5151811015610ca357828103610c5c575b610c579061080e565b610c33565b95610c65610a39565b878152610c76886102148688610833565b516020820152610c868287610833565b52610c918186610833565b506001810180911161081d5795610c4e565b5094505050610cb190610fea565b9060025491610cbf83610539565b90610ccd6040519283610502565b838252610ce9601f19610cdf86610539565b0160208401610971565b60005b6001600160401b0384166001600160401b0382161015610e99576000805b868110610d21575050610d1c906109c5565b610cec565b610d336001600160401b038716610539565b610d406040519182610502565b6001600160401b038716808252601f1990610d5a90610539565b01366020830137610d6b8287610833565b52610d768186610833565b50610d9e81610d98610d916001600160401b03871688610833565b51516106db565b50610728565b90549060031b1c610db8575b610db39061080e565b610d0a565b6000549091906001600160a01b03166020610ddc6001600160401b03861687610833565b5151602460405180948193632a2d0c4760e01b835260048301525afa908115610e8d57600091610e4a575b5090600191610e2b6001600160401b03610e21868a610833565b5193168093610833565b90838060a01b03169052016001600160401b03811161081d5790610daa565b6020813d602011610e85575b81610e6360209383610502565b810103126102315751906001600160a01b03821682036100b857506001610e07565b3d9150610e56565b6040513d6000823e3d90fd5b505091505090565b8181029291811591840414171561081d57565b8115610ebe570490565b634e487b7160e01b600052601260045260246000fd5b610efd610ef1610ef6610ef1610eea86866110f7565b94806110f7565b6110b9565b93806110f7565b916127109182810292818404149015171561081d57610f2592610f1f91610ea1565b90610eb4565b90565b6000908015610fe6578080600114610fde57600214610fd6576001918261013383101683600b84101617610fc65760028392935b808211610f8957505082600019048211610f7557500290565b634e487b7160e01b81526011600452602490fd5b909380600019048111610fb257818516610fa9575b800293811c90610f5c565b80930292610f9e565b634e487b7160e01b83526011600452602483fd5b929150600283910a92610f755750565b509060049150565b505050600190565b5090565b80519091600090600019908184019084821190815b61081d57828510156110b15760005b6110188688610a2c565b85810190811161081d5781101561109b5760209081611037828b610833565b510151600182019081831161081d5761106393611054838d610833565b51015110611068575b5061080e565b61100e565b611072818b610833565b5190611089611081848d610833565b51918c610833565b52611094828b610833565b523861105d565b509190936110a89061080e565b93909181610fff565b945050505050565b600180820180831161081d57811c90825b8383106110d75750505090565b909192506110ee836110e98184610eb4565b610ab2565b821c91906110ca565b9081518151036105ae57600091825b815184101561113b57610927611135916110e96111238786610833565b5161112e8888610833565b5190610ea1565b92611106565b925050509056fea2646970667358221220b9658b2853a7e79a7d19194b876c65e59b7987b1b57c50981d7087435ce4083064736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c8063193ba7b41461034c5780631e2a861b146102c55780632a45e1ed1461025857806339275b0a146102395780634accf88b146100bb5763cf853e191461006257600080fd5b346100b85760603660031901126100b857602435906001600160401b0382116100b857506100b49261009a6100a9923690830161065b565b6100a26105b3565b9135610c0a565b905191829182610740565b0390f35b80fd5b5091346102355781600319360112610235576001600160a01b0381358181169491929085900361023157602435946001600160401b0393848716870361022d5760019485549561010a8761098e565b96815b8181106101965750505050906024602092855416938751948593849263cb0e0d7d60e01b84528301525afa91821561018b578092610155575b6100b4856100a9888787610c0a565b9091506020823d8211610183575b8161017060209383610502565b810103126100b8575051816100b4610146565b3d9150610163565b8451903d90823e3d90fd5b61019f826107dc565b6101a9828b610833565b526101b4818a610833565b508280805b6101ce575b50506101c99061080e565b61010d565b8a86821685811015610226579061021a61022093926102148761020e6101fc6101f6836106db565b506109dd565b6102086101f6896106db565b90610ed4565b94610833565b51610833565b526109c5565b816101b9565b50506101be565b8380fd5b5080fd5b8280fd5b5090346102315781600319360112610231576020906002549051908152f35b50913461023557816003193601126102355735916024359260015481101561023157600182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019081548410156100b857506020926102b791610728565b91905490519160031b1c8152f35b509134610235576080366003190112610235576001600160401b038135818111610348576102f6903690840161065b565b916024359182116103485761030d91369101610550565b926103166105b3565b936064359160028310156100b85750916103386100b4959261033d9483610847565b610abf565b9051918291826105c9565b8480fd5b509134610235576080366003190112610235576001600160401b03926024358481116102315761037f9036908401610550565b6103876105b3565b946064359260028410156100b85780548651630596815760e21b81528635968101969096528190869060249082906001600160a01b03165afa9485156104f65781956103e2575b6100b48761033d8a896103388a8a83610847565b90919294503d8083833e6103f68183610502565b8101602091828183031261022d5780519085821161034857019080601f8301121561022d5781519061042782610539565b956104348a519788610502565b828752848088019360051b850101938285116104f257858101935b858510610473575050505050505050916103386100b4959261033d819497506103ce565b84518381116104ee57820184603f820112156104ee5780888e92015161049881610539565b926104a581519485610502565b8184528a84019160051b830101918783116104ea57918f8b94929593015b8181106104da57505082935081520194019361044f565b80518652948401948b94016104c3565b8b80fd5b8880fd5b8680fd5b508551903d90823e3d90fd5b90601f801991011681019081106001600160401b0382111761052357604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116105235760051b60200190565b81601f820112156105ae5780359161056783610539565b926105756040519485610502565b808452602092838086019260051b8201019283116105ae578301905b82821061059f575050505090565b81358152908301908301610591565b600080fd5b604435906001600160401b03821682036105ae57565b602080820190808352835180925260408301928160408460051b830101950193600080925b8584106105ff575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b8082106106425750505090806001929901940194019295949391906105ee565b9193806001929486518152019401920188939291610622565b9080601f830112156105ae5781359061067382610539565b926106816040519485610502565b828452602092838086019160051b830101928084116105ae57848301915b8483106106af5750505050505090565b82356001600160401b0381116105ae5786916106d084848094890101610550565b81520192019161069f565b6001548110156107125760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156107125760005260206000200190600090565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410610776575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b8082106107b9575050509080600192990194019401929594939190610765565b82516001600160a01b031684528994938401939092019160019190910190610799565b906107e682610539565b6107f36040519182610502565b8281528092610804601f1991610539565b0190602036910137565b600019811461081d5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156107125760209160051b010190565b9190825190610855826107dc565b93600190815b84811061086b5750505050505090565b6108758183610833565b5190600287101561095c57848785036108aa57610895906108a593610ed4565b61089f828a610833565b5261080e565b61085b565b5090836000918183925b6108c9575b505050906108956108a5926110b9565b90919282518410156109545761092d906108e38585610833565b516108ee868b610833565b511015610935576109279061092161091c8b6109158961090e818b610833565b5192610833565b5190610a2c565b610f28565b90610ab2565b9361080e565b9190806108b4565b6109279061092161091c610949888d610833565b516109158989610833565b9250806108b9565b60246000634e487b7160e01b81526021600452fd5b60005b82811061098057505050565b606082820152602001610974565b906109c361099b83610539565b6109a86040519182610502565b838152602081946109bb601f1991610539565b019101610971565b565b6001600160401b0380911690811461081d5760010190565b9060405191828154918282526020928383019160005283600020936000905b828210610a12575050506109c392500383610502565b8554845260019586019588955093810193909101906109fc565b9190820391821161081d57565b60405190604082018281106001600160401b038211176105235760405260006020838281520152565b90610a6c82610539565b610a796040519182610502565b8281528092610a8a601f1991610539565b019060005b828110610a9b57505050565b602090610aa6610a39565b82828501015201610a8f565b9190820180921161081d57565b8051929392600019810190811161081d57610ad990610a62565b916000946001955b8351871015610b3657610af2610a39565b878152610aff8886610833565b516020820152610b0f8287610833565b52610b1a8186610833565b506001810180911161081d57610b30909661080e565b95610ae1565b5094509291610b459150610fea565b916001600160401b0380941692610b5b8461098e565b926000945b8686169681881015610bff57610b8b610b84610b7c8a87610833565b515187610833565b51516107dc565b610b958988610833565b52610ba08887610833565b5060005b610bb1610b7c8a87610833565b5151811015610beb5780610bd7610be692610214610bcf8d8a610833565b51518a610833565b5161089f826102148d8c610833565b610ba4565b5095610bf89197506109c5565b9495610b60565b505094505050905090565b90610c158282610833565b5151600019810190811161081d57610c2c90610a62565b9160009460015b610c3d8385610833565b5151811015610ca357828103610c5c575b610c579061080e565b610c33565b95610c65610a39565b878152610c76886102148688610833565b516020820152610c868287610833565b52610c918186610833565b506001810180911161081d5795610c4e565b5094505050610cb190610fea565b9060025491610cbf83610539565b90610ccd6040519283610502565b838252610ce9601f19610cdf86610539565b0160208401610971565b60005b6001600160401b0384166001600160401b0382161015610e99576000805b868110610d21575050610d1c906109c5565b610cec565b610d336001600160401b038716610539565b610d406040519182610502565b6001600160401b038716808252601f1990610d5a90610539565b01366020830137610d6b8287610833565b52610d768186610833565b50610d9e81610d98610d916001600160401b03871688610833565b51516106db565b50610728565b90549060031b1c610db8575b610db39061080e565b610d0a565b6000549091906001600160a01b03166020610ddc6001600160401b03861687610833565b5151602460405180948193632a2d0c4760e01b835260048301525afa908115610e8d57600091610e4a575b5090600191610e2b6001600160401b03610e21868a610833565b5193168093610833565b90838060a01b03169052016001600160401b03811161081d5790610daa565b6020813d602011610e85575b81610e6360209383610502565b810103126102315751906001600160a01b03821682036100b857506001610e07565b3d9150610e56565b6040513d6000823e3d90fd5b505091505090565b8181029291811591840414171561081d57565b8115610ebe570490565b634e487b7160e01b600052601260045260246000fd5b610efd610ef1610ef6610ef1610eea86866110f7565b94806110f7565b6110b9565b93806110f7565b916127109182810292818404149015171561081d57610f2592610f1f91610ea1565b90610eb4565b90565b6000908015610fe6578080600114610fde57600214610fd6576001918261013383101683600b84101617610fc65760028392935b808211610f8957505082600019048211610f7557500290565b634e487b7160e01b81526011600452602490fd5b909380600019048111610fb257818516610fa9575b800293811c90610f5c565b80930292610f9e565b634e487b7160e01b83526011600452602483fd5b929150600283910a92610f755750565b509060049150565b505050600190565b5090565b80519091600090600019908184019084821190815b61081d57828510156110b15760005b6110188688610a2c565b85810190811161081d5781101561109b5760209081611037828b610833565b510151600182019081831161081d5761106393611054838d610833565b51015110611068575b5061080e565b61100e565b611072818b610833565b5190611089611081848d610833565b51918c610833565b52611094828b610833565b523861105d565b509190936110a89061080e565b93909181610fff565b945050505050565b600180820180831161081d57811c90825b8383106110d75750505090565b909192506110ee836110e98184610eb4565b610ab2565b821c91906110ca565b9081518151036105ae57600091825b815184101561113b57610927611135916110e96111238786610833565b5161112e8888610833565b5190610ea1565b92611106565b925050509056fea2646970667358221220b9658b2853a7e79a7d19194b876c65e59b7987b1b57c50981d7087435ce4083064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1585,
        "contract": "contracts/KNN.sol:KNN",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)1579"
      },
      {
        "astId": 1589,
        "contract": "contracts/KNN.sol:KNN",
        "label": "userActivityMatrix",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 1591,
        "contract": "contracts/KNN.sol:KNN",
        "label": "totalCategories",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(DataLayer)1579": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}