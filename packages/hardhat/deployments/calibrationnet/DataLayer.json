{
  "address": "0xFD905BD593fD603F4309CB686f9a11DC881483e1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        }
      ],
      "name": "NewAnalytics",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "addAnalytics",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum DataLayer.Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "addSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "consumerCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dappAnalytics",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "enum DataLayer.Category",
          "name": "schemaCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSchemas",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schemaName",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "columns",
              "type": "bytes32[]"
            },
            {
              "internalType": "enum DataLayer.Category",
              "name": "schemaCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalRecords",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataLayer.SchemaDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        }
      ],
      "name": "getAnalyticsDataBySchemaName",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        }
      ],
      "name": "getColumnsOfSchema",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSchemaAddressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "getSchemaIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserActivityMatrix",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "schemaIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCategories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "updateAnalytics",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "updateUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userActivityMatrix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userRewardPerDatapoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe34792882aeeb4d94ead101536795e8bf3ed4f9a9c2f9a3faeca78c35b7641e4",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xFD905BD593fD603F4309CB686f9a11DC881483e1",
    "transactionIndex": 1,
    "gasUsed": "76852059",
    "logsBloom": "0xffeffffffffffffffdfffff77ffff7fefffffffffef7efbe7ffffffffffffbdffffffdfd7fffeffbf7dfffffff7bffffffbfffffffffdfedffbfdffffefffffffffffffeefdfffdf6ffffdfffbffff3efeffefff7feeffffefffffbffffffff9ffffffffdffff7fff7fffffeffffff7bfffeeeff7fffffffffbf7dffffbfffffbfffffffdfffdfffc7fffffffdfefed7ffffffffffffdfbf7ffffefffffffffbbffffe7fffffbfff7ff3ffffffcfbff3ffffeffffffffbfffffeefffffffffeffffffffffffdfffffffefffffbfffffdbf7feffdffffefffffefbbbffeffffd7ffffffdff7fffff7fffdff7fefffffffefff7ffffffffbfffffffeffffffffff",
    "blockHash": "0xccd7ec34ec1e67c9e76cd43c7b858286cf429a150c76c705ef8864c591d061fd",
    "transactionHash": "0xe34792882aeeb4d94ead101536795e8bf3ed4f9a9c2f9a3faeca78c35b7641e4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1640833,
        "transactionHash": "0xe34792882aeeb4d94ead101536795e8bf3ed4f9a9c2f9a3faeca78c35b7641e4",
        "address": "0xFD905BD593fD603F4309CB686f9a11DC881483e1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000324cf97d4373ef009fdf2f1affc58406c86899af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xccd7ec34ec1e67c9e76cd43c7b858286cf429a150c76c705ef8864c591d061fd"
      }
    ],
    "blockNumber": 1640833,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9471fd72183e1372e64a62ad6ee06773",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"NewAnalytics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"addAnalytics\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum DataLayer.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"consumerCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dappAnalytics\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataLayer.Category\",\"name\":\"schemaCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSchemas\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum DataLayer.Category\",\"name\":\"schemaCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRecords\",\"type\":\"uint256\"}],\"internalType\":\"struct DataLayer.SchemaDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"}],\"name\":\"getAnalyticsDataBySchemaName\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"}],\"name\":\"getColumnsOfSchema\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSchemaAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getSchemaIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserActivityMatrix\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"schemaIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCategories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateAnalytics\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"updateUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userActivityMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userRewardPerDatapoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataLayer.sol\":\"DataLayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x018bc280bd319aeeb71d64238d8876969c7b42663df00fff356b1d02692d4b51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234620001a15760008054336001600160a01b0319821681178355906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a360018054906801000000000000000091828110156200018d57818101808355811015620001795781845260208085206060519201906001600160401b0383116200016557848311620001655781548383558084106200013b575b5060809186528086209084875b85811062000128575050505050508260065560078055600954918210156200011457810190816009551015620001005760099052662386f26fc100006008556117cc9081620001a78239f35b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b83526041600452602483fd5b82855195019481850155018590620000b4565b828752848483892092830192015b82811062000159575050620000a7565b88815501859062000149565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b84526041600452602484fd5b600080fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816302fa955d146111285750806306be2b411461105e5780631060192e1461103c578063165a055c14610f7357806326fdc0f614610eea5780632a2d0c4714610eb85780632a45e1ed14610e4b57806334aa962314610a6857806339275b0a14610a49578063421b2d8b146108ad578063578f2aa01461088e578063715018a61461083157806380a13096146107eb57806380eb65ae146107c45780638343d5e6146105345780638b12ed54146104ec5780638da5cb5b146104c45780639fba53bf146102db578063a9d2e2d7146102a6578063cb0e0d7d1461026e578063f2fde38b146101a2578063f5096a7d1461017f5763fa2e47cc03610011573461017b578160031936011261017b576024356001600160a01b0381169081900361017657610162836020958435815260058752205461146e565b509060005201825280600020549051908152f35b600080fd5b8280fd5b50503461019e578160031936011261019e576020906008549051908152f35b5080fd5b503461017b57602036600319011261017b576101bc611531565b906101c561157b565b6001600160a01b0391821692831561021c575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50503461019e57602036600319011261019e5760209181906001600160a01b03610296611531565b1681526002845220549051908152f35b503461017b57602036600319011261017b5760209282916001600160a01b036102cd611531565b168252845220549051908152f35b5082903461019e578160031936011261019e576009549160001991828401938085116104b15761030d859496956116e3565b9361031a86519586611660565b808552610329601f19916116e3565b01835b818110610492575050600195865b8281106103d557505050508251938493602080860191818752855180935280870182828560051b8a0101970195915b8483106103765788880389f35b9193959750919384808298603f198c82030186528a5190815181526103a78383015160808086850152830190611547565b916103b887820151888401906114bf565b606080910151910152990193019301909288979694929593610369565b6103e1979596976116fb565b6103ea8261146e565b50548152610402876103fb8461146e565b5001611731565b602082015260ff60026104148461146e565b50015416600781101561047f578982015260036104308361146e565b50015460608201528282019082821161046c578161045d9161045661046395948c611782565b5289611782565b506115d3565b9695949661033a565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b875260218652602487fd5b6020906104a1989697986116fb565b82828a010152019695949661032c565b634e487b7160e01b835260118252602483fd5b50503461019e578160031936011261019e57905490516001600160a01b039091168152602090f35b503461017b578160031936011261017b57916020923581526005835260056105168383205461146e565b5060243583520183528190205490516001600160a01b039091168152f35b50903461017b57606036600319011261017b5767ffffffffffffffff8235602480358381116107c05761056a9036908701611348565b90936044359160078310156107bc5784895260209560058752878a20546107855760095493600160401b9081861015610773576105ae60019687810160095561146e565b5090888255600282019060ff80198354169116179055600381019485548381101561074c5780886105e29201885587611519565b6107605760605191821161074c5783821161074c578054828255808310610722575b506080979697906000528a60002060005b83811061071157505050508b9460068183019201955b85811061066957505050505050505060095494600019860195861161065857505084526005905282205580f35b634e487b7160e01b87526011905285fd5b8754156106fd57876000526106808b6000206115f8565b61068b81878761163c565b358354858110156106e957918f8e908a8f84956106cc6106b3898b6106e49b018d558c611519565b819391549060031b600019811b9283911b169119161790565b90556106d9858d8d61163c565b3583525220556115d3565b61062b565b5050634e487b7160e01b8e5260418d52888efd5b8860328e634e487b7160e01b600052526000fd5b825182820155918c01918801610615565b8160005288838d60002092830192015b828110610740575050610604565b60008155018990610732565b8860418e634e487b7160e01b600052526000fd5b8860008e634e487b7160e01b8252526000fd5b634e487b7160e01b8c5260418b52868cfd5b875162461bcd60e51b8152808a0188905260128187015271534348454d41204e414d452045584953545360701b6044820152606490fd5b8880fd5b8680fd5b503461017b57602036600319011261017b5760209282913581526005845220549051908152f35b503461017b57602036600319011261017b5760016103fb8361082d9561081a943581526005602052205461146e565b9051918291602083526020830190611547565b0390f35b833461088b578060031936011261088b5761084a61157b565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461019e578160031936011261019e576020906006549051908152f35b50903461017b57602080600319360112610a45576108c9611531565b92600690815490600191828101809111610a32578355815490600160401b9182811015610a095780846108fe920185556114e2565b919091610a1e576060519267ffffffffffffffff8411610a095783116109f4575080548282558083106109ca575b50608090600052846000208360005b8481106109b857509250505086905b610987575b5050546001600160a01b039093168085526002825282852084905592845260039052822080546001600160a01b031916909117905580f35b6007548110156109b3576109ad906109a86109a285546114e2565b506115f8565b6115d3565b8161094a565b61094f565b8784519401938184015501849061093b565b8160005283838760002092830192015b8281106109e857505061092c565b600081550184906109da565b604190634e487b7160e01b6000525260246000fd5b604182634e487b7160e01b6000525260246000fd5b600090634e487b7160e01b82525260246000fd5b634e487b7160e01b885260118252602488fd5b8380fd5b50503461019e578160031936011261019e576020906007549051908152f35b509190610a7436611379565b84889593929552602093600585528789205415610e13576001600160a01b038716808a5260028652888a205490949015610dba575b895260058552610abb888a205461146e565b50958a87019385600052848752896000205415610ce2575b878b958b939587896003998c60068c88019701985b888510610c425750509750975050505050505052600283526002610b0e878920546114e2565b5094019360ff855416906007821015610c2f5790610b2b91611519565b81928192549283911b1c9160018301809311610c1c57610b79948a94610b658695869586959060031b600019811b9283911b169119161790565b905560085490828215610c13575bf161169f565b338552858152838520549060018201809211610c0057338652869052838520555460ff16916007831015610bed57516001600160a01b0391909116815233602082015260408101919091527f3a5918ca939d93e6bd42ac6f2f818c05e35a0fec0af9c4e1fd1f2b32db4e2f0d90606090a180f35b634e487b7160e01b845260218552602484fd5b634e487b7160e01b865260118752602486fd5b506108fc610b73565b634e487b7160e01b8a5260118b5260248afd5b634e487b7160e01b895260218a52602489fd5b610c86928a8c93610c7a8f8d610c738e8e610c618f8f9690879161163c565b359c6000528652886000205490611519565b509761163c565b35835252205490611519565b808c839493549182911b1c928301809311610cc857610cbe94939260001960039390931b92831b8019909216921b16175b90556115d3565b898f8f8d90610ae8565b505050505060118f634e487b7160e01b6000525260246000fd5b60038801610cef81611682565b50600190508981018d825b610d72575b50508154600019929150828101908111610d5d5788600052878a528c6000205554908101908111610d4a578b52600588018752898b2080546001600160a01b03191687179055610ad3565b634e487b7160e01b8c5260118d5260248cfd5b5050634e487b7160e01b8c5260118d5260248cfd5b8154811015610db55783546000198101908111610da057906109a86109a2610d9a9387611519565b82610cfa565b508f8f6011602492634e487b7160e01b835252fd5b610cff565b303b15610e0557885163421b2d8b60e01b81528b81018690528a8160248183305af18015610e0957908b91610df1575b5050610aa9565b610dfa9061164c565b610e05578938610dea565b8980fd5b8a513d8d823e3d90fd5b875162461bcd60e51b8152808b01869052601260248201527114d0d2115350481393d50814149154d1539560721b6044820152606490fd5b503461017b578160031936011261017b5735916024359260015481101561019e5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190815484101561088b5750602092610eaa91611519565b91905490519160031b1c8152f35b503461017b57602036600319011261017b5735825260036020908152918190205490516001600160a01b039091168152f35b5082903461019e57602036600319011261019e57359060095482101561088b5750600790600960005202610f7160ff7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1837f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015493015416835192835260208301906114bf565bf35b50823461088b576020918260031936011261019e5783600392610f9e9235815260058552205461146e565b5001908154610fac816116e3565b92610fb985519485611660565b8184526000908152828120928085015b838310610fdd5786518061082d88826113dc565b81908751808388549182815201908860005284600020906000905b8082106110225750505091816110146001959386950382611660565b815201950192019193610fc9565b825484528796909301926001928301929190910190610ff8565b83823461019e57602036600319011261019e5761105761157b565b3560085580f35b82843461088b578060031936011261088b5750600180549061107f826116e3565b9161108c84519384611660565b808352600082815260207fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68186015b8484106110cf5787518061082d89826113dc565b8583895192838286549586815201948660005283600020906000905b808210611110575050506111028185960382611660565b8152019201930192906110bb565b8254885296909401958b9589959281019201906110eb565b8484849261113536611379565b91949593929060018060a01b03871693848a5260209560028752898b205415611306575b5089526005855261116c888a205461146e565b50958a8701938560005284875289600020541561126b575b91936006880192600389019190888d898e825b88841061122657995050985050505050505050526002825260026111bd868820546114e2565b5093019260ff84541690600782101561121357906111da91611519565b815490818160031b1c9160018301809311610c1c57610b79948a94610b658695869586959060031b600019811b9283911b169119161790565b634e487b7160e01b885260218952602488fd5b8a610cb7926106b3928c8f98610c7a898f8f8f908f916112609f85610c739461124e9261163c565b359d6000528652886000205490611519565b8990898f8f90611197565b6003880161127881611682565b50600190508981018d825b6112d3575b50508154600019929150828101908111610d5d5788600052878a528c6000205554908101908111610d4a578b52600588018752898b2080546001600160a01b03191687179055611184565b81548110156113015783546000198101908111610da057906109a86109a26112fb9387611519565b82611283565b611288565b303b156113445763421b2d8b60e01b81528b81018690528a8160248183305af18015610e0957156111595761133d909a919a61164c565b988b611159565b8a80fd5b9181601f840112156101765782359167ffffffffffffffff8311610176576020808501948460051b01011161017657565b6080600319820112610176576004356001600160a01b038116810361017657916024359167ffffffffffffffff9160443583811161017657826113be91600401611348565b93909392606435918211610176576113d891600401611348565b9091565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410611412575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b808210611455575050509080600192990194019401929594939190611401565b9193806001929486518152019401920188939291611435565b6009548110156114a9576007906009600052027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b634e487b7160e01b600052603260045260246000fd5b9060078210156114cc5752565b634e487b7160e01b600052602160045260246000fd5b6001548110156114a95760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156114a95760005260206000200190600090565b600435906001600160a01b038216820361017657565b90815180825260208080930193019160005b828110611567575050505090565b835185529381019392810192600101611559565b6000546001600160a01b0316330361158f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146115e25760010190565b634e487b7160e01b600052601160045260246000fd5b8054600160401b8110156116265761161591600182018155611519565b8154906000199060031b1b19169055565b634e487b7160e01b600052604160045260246000fd5b91908110156114a95760051b0190565b67ffffffffffffffff811161162657604052565b90601f8019910116810190811067ffffffffffffffff82111761162657604052565b8054600160401b811015611626576113d891600182018155611519565b156116a657565b60405162461bcd60e51b81526020600482015260156024820152742330b4b632b2103a37903932bbb0b932103ab9b2b960591b6044820152606490fd5b67ffffffffffffffff81116116265760051b60200190565b604051906080820182811067ffffffffffffffff8211176116265760405260006060838281528160208201528260408201520152565b9060405191828154918282526020928383019160005283600020936000905b8282106117685750505061176692500383611660565b565b855484526001958601958895509381019390910190611750565b80518210156114a95760209160051b01019056fea2646970667358221220010d35ed3633f00c7c8b150cf6d2cee8f965dac29a4d736036b5852b74d5192b64736f6c63430008110033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816302fa955d146111285750806306be2b411461105e5780631060192e1461103c578063165a055c14610f7357806326fdc0f614610eea5780632a2d0c4714610eb85780632a45e1ed14610e4b57806334aa962314610a6857806339275b0a14610a49578063421b2d8b146108ad578063578f2aa01461088e578063715018a61461083157806380a13096146107eb57806380eb65ae146107c45780638343d5e6146105345780638b12ed54146104ec5780638da5cb5b146104c45780639fba53bf146102db578063a9d2e2d7146102a6578063cb0e0d7d1461026e578063f2fde38b146101a2578063f5096a7d1461017f5763fa2e47cc03610011573461017b578160031936011261017b576024356001600160a01b0381169081900361017657610162836020958435815260058752205461146e565b509060005201825280600020549051908152f35b600080fd5b8280fd5b50503461019e578160031936011261019e576020906008549051908152f35b5080fd5b503461017b57602036600319011261017b576101bc611531565b906101c561157b565b6001600160a01b0391821692831561021c575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50503461019e57602036600319011261019e5760209181906001600160a01b03610296611531565b1681526002845220549051908152f35b503461017b57602036600319011261017b5760209282916001600160a01b036102cd611531565b168252845220549051908152f35b5082903461019e578160031936011261019e576009549160001991828401938085116104b15761030d859496956116e3565b9361031a86519586611660565b808552610329601f19916116e3565b01835b818110610492575050600195865b8281106103d557505050508251938493602080860191818752855180935280870182828560051b8a0101970195915b8483106103765788880389f35b9193959750919384808298603f198c82030186528a5190815181526103a78383015160808086850152830190611547565b916103b887820151888401906114bf565b606080910151910152990193019301909288979694929593610369565b6103e1979596976116fb565b6103ea8261146e565b50548152610402876103fb8461146e565b5001611731565b602082015260ff60026104148461146e565b50015416600781101561047f578982015260036104308361146e565b50015460608201528282019082821161046c578161045d9161045661046395948c611782565b5289611782565b506115d3565b9695949661033a565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b875260218652602487fd5b6020906104a1989697986116fb565b82828a010152019695949661032c565b634e487b7160e01b835260118252602483fd5b50503461019e578160031936011261019e57905490516001600160a01b039091168152602090f35b503461017b578160031936011261017b57916020923581526005835260056105168383205461146e565b5060243583520183528190205490516001600160a01b039091168152f35b50903461017b57606036600319011261017b5767ffffffffffffffff8235602480358381116107c05761056a9036908701611348565b90936044359160078310156107bc5784895260209560058752878a20546107855760095493600160401b9081861015610773576105ae60019687810160095561146e565b5090888255600282019060ff80198354169116179055600381019485548381101561074c5780886105e29201885587611519565b6107605760605191821161074c5783821161074c578054828255808310610722575b506080979697906000528a60002060005b83811061071157505050508b9460068183019201955b85811061066957505050505050505060095494600019860195861161065857505084526005905282205580f35b634e487b7160e01b87526011905285fd5b8754156106fd57876000526106808b6000206115f8565b61068b81878761163c565b358354858110156106e957918f8e908a8f84956106cc6106b3898b6106e49b018d558c611519565b819391549060031b600019811b9283911b169119161790565b90556106d9858d8d61163c565b3583525220556115d3565b61062b565b5050634e487b7160e01b8e5260418d52888efd5b8860328e634e487b7160e01b600052526000fd5b825182820155918c01918801610615565b8160005288838d60002092830192015b828110610740575050610604565b60008155018990610732565b8860418e634e487b7160e01b600052526000fd5b8860008e634e487b7160e01b8252526000fd5b634e487b7160e01b8c5260418b52868cfd5b875162461bcd60e51b8152808a0188905260128187015271534348454d41204e414d452045584953545360701b6044820152606490fd5b8880fd5b8680fd5b503461017b57602036600319011261017b5760209282913581526005845220549051908152f35b503461017b57602036600319011261017b5760016103fb8361082d9561081a943581526005602052205461146e565b9051918291602083526020830190611547565b0390f35b833461088b578060031936011261088b5761084a61157b565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461019e578160031936011261019e576020906006549051908152f35b50903461017b57602080600319360112610a45576108c9611531565b92600690815490600191828101809111610a32578355815490600160401b9182811015610a095780846108fe920185556114e2565b919091610a1e576060519267ffffffffffffffff8411610a095783116109f4575080548282558083106109ca575b50608090600052846000208360005b8481106109b857509250505086905b610987575b5050546001600160a01b039093168085526002825282852084905592845260039052822080546001600160a01b031916909117905580f35b6007548110156109b3576109ad906109a86109a285546114e2565b506115f8565b6115d3565b8161094a565b61094f565b8784519401938184015501849061093b565b8160005283838760002092830192015b8281106109e857505061092c565b600081550184906109da565b604190634e487b7160e01b6000525260246000fd5b604182634e487b7160e01b6000525260246000fd5b600090634e487b7160e01b82525260246000fd5b634e487b7160e01b885260118252602488fd5b8380fd5b50503461019e578160031936011261019e576020906007549051908152f35b509190610a7436611379565b84889593929552602093600585528789205415610e13576001600160a01b038716808a5260028652888a205490949015610dba575b895260058552610abb888a205461146e565b50958a87019385600052848752896000205415610ce2575b878b958b939587896003998c60068c88019701985b888510610c425750509750975050505050505052600283526002610b0e878920546114e2565b5094019360ff855416906007821015610c2f5790610b2b91611519565b81928192549283911b1c9160018301809311610c1c57610b79948a94610b658695869586959060031b600019811b9283911b169119161790565b905560085490828215610c13575bf161169f565b338552858152838520549060018201809211610c0057338652869052838520555460ff16916007831015610bed57516001600160a01b0391909116815233602082015260408101919091527f3a5918ca939d93e6bd42ac6f2f818c05e35a0fec0af9c4e1fd1f2b32db4e2f0d90606090a180f35b634e487b7160e01b845260218552602484fd5b634e487b7160e01b865260118752602486fd5b506108fc610b73565b634e487b7160e01b8a5260118b5260248afd5b634e487b7160e01b895260218a52602489fd5b610c86928a8c93610c7a8f8d610c738e8e610c618f8f9690879161163c565b359c6000528652886000205490611519565b509761163c565b35835252205490611519565b808c839493549182911b1c928301809311610cc857610cbe94939260001960039390931b92831b8019909216921b16175b90556115d3565b898f8f8d90610ae8565b505050505060118f634e487b7160e01b6000525260246000fd5b60038801610cef81611682565b50600190508981018d825b610d72575b50508154600019929150828101908111610d5d5788600052878a528c6000205554908101908111610d4a578b52600588018752898b2080546001600160a01b03191687179055610ad3565b634e487b7160e01b8c5260118d5260248cfd5b5050634e487b7160e01b8c5260118d5260248cfd5b8154811015610db55783546000198101908111610da057906109a86109a2610d9a9387611519565b82610cfa565b508f8f6011602492634e487b7160e01b835252fd5b610cff565b303b15610e0557885163421b2d8b60e01b81528b81018690528a8160248183305af18015610e0957908b91610df1575b5050610aa9565b610dfa9061164c565b610e05578938610dea565b8980fd5b8a513d8d823e3d90fd5b875162461bcd60e51b8152808b01869052601260248201527114d0d2115350481393d50814149154d1539560721b6044820152606490fd5b503461017b578160031936011261017b5735916024359260015481101561019e5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190815484101561088b5750602092610eaa91611519565b91905490519160031b1c8152f35b503461017b57602036600319011261017b5735825260036020908152918190205490516001600160a01b039091168152f35b5082903461019e57602036600319011261019e57359060095482101561088b5750600790600960005202610f7160ff7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1837f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015493015416835192835260208301906114bf565bf35b50823461088b576020918260031936011261019e5783600392610f9e9235815260058552205461146e565b5001908154610fac816116e3565b92610fb985519485611660565b8184526000908152828120928085015b838310610fdd5786518061082d88826113dc565b81908751808388549182815201908860005284600020906000905b8082106110225750505091816110146001959386950382611660565b815201950192019193610fc9565b825484528796909301926001928301929190910190610ff8565b83823461019e57602036600319011261019e5761105761157b565b3560085580f35b82843461088b578060031936011261088b5750600180549061107f826116e3565b9161108c84519384611660565b808352600082815260207fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68186015b8484106110cf5787518061082d89826113dc565b8583895192838286549586815201948660005283600020906000905b808210611110575050506111028185960382611660565b8152019201930192906110bb565b8254885296909401958b9589959281019201906110eb565b8484849261113536611379565b91949593929060018060a01b03871693848a5260209560028752898b205415611306575b5089526005855261116c888a205461146e565b50958a8701938560005284875289600020541561126b575b91936006880192600389019190888d898e825b88841061122657995050985050505050505050526002825260026111bd868820546114e2565b5093019260ff84541690600782101561121357906111da91611519565b815490818160031b1c9160018301809311610c1c57610b79948a94610b658695869586959060031b600019811b9283911b169119161790565b634e487b7160e01b885260218952602488fd5b8a610cb7926106b3928c8f98610c7a898f8f8f908f916112609f85610c739461124e9261163c565b359d6000528652886000205490611519565b8990898f8f90611197565b6003880161127881611682565b50600190508981018d825b6112d3575b50508154600019929150828101908111610d5d5788600052878a528c6000205554908101908111610d4a578b52600588018752898b2080546001600160a01b03191687179055611184565b81548110156113015783546000198101908111610da057906109a86109a26112fb9387611519565b82611283565b611288565b303b156113445763421b2d8b60e01b81528b81018690528a8160248183305af18015610e0957156111595761133d909a919a61164c565b988b611159565b8a80fd5b9181601f840112156101765782359167ffffffffffffffff8311610176576020808501948460051b01011161017657565b6080600319820112610176576004356001600160a01b038116810361017657916024359167ffffffffffffffff9160443583811161017657826113be91600401611348565b93909392606435918211610176576113d891600401611348565b9091565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410611412575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b808210611455575050509080600192990194019401929594939190611401565b9193806001929486518152019401920188939291611435565b6009548110156114a9576007906009600052027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b634e487b7160e01b600052603260045260246000fd5b9060078210156114cc5752565b634e487b7160e01b600052602160045260246000fd5b6001548110156114a95760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156114a95760005260206000200190600090565b600435906001600160a01b038216820361017657565b90815180825260208080930193019160005b828110611567575050505090565b835185529381019392810192600101611559565b6000546001600160a01b0316330361158f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146115e25760010190565b634e487b7160e01b600052601160045260246000fd5b8054600160401b8110156116265761161591600182018155611519565b8154906000199060031b1b19169055565b634e487b7160e01b600052604160045260246000fd5b91908110156114a95760051b0190565b67ffffffffffffffff811161162657604052565b90601f8019910116810190811067ffffffffffffffff82111761162657604052565b8054600160401b811015611626576113d891600182018155611519565b156116a657565b60405162461bcd60e51b81526020600482015260156024820152742330b4b632b2103a37903932bbb0b932103ab9b2b960591b6044820152606490fd5b67ffffffffffffffff81116116265760051b60200190565b604051906080820182811067ffffffffffffffff8211176116265760405260006060838281528160208201528260408201520152565b9060405191828154918282526020928383019160005283600020936000905b8282106117685750505061176692500383611660565b565b855484526001958601958895509381019390910190611750565b80518210156114a95760209160051b01019056fea2646970667358221220010d35ed3633f00c7c8b150cf6d2cee8f965dac29a4d736036b5852b74d5192b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 741,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "userActivityMatrix",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 745,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "addressToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 749,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "idToAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 753,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "consumerCredits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 757,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "schemaIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 759,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "latestIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 761,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "totalCategories",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 763,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "userRewardPerDatapoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 811,
        "contract": "contracts/DataLayer.sol:DataLayer",
        "label": "dappAnalytics",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Analytics)807_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Analytics)807_storage)dyn_storage": {
        "base": "t_struct(Analytics)807_storage",
        "encoding": "dynamic_array",
        "label": "struct DataLayer.Analytics[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Category)771": {
        "encoding": "inplace",
        "label": "enum DataLayer.Category",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Analytics)807_storage": {
        "encoding": "inplace",
        "label": "struct DataLayer.Analytics",
        "members": [
          {
            "astId": 784,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "schemaName",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 787,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "columns",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 790,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "schemaCategory",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Category)771"
          },
          {
            "astId": 794,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 798,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "addressToId",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 802,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "idToAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 806,
            "contract": "contracts/DataLayer.sol:DataLayer",
            "label": "columnToIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}