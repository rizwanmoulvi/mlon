{
  "address": "0x2441883A4652526324B2D155f6C81c3DDC1Eb59f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "y",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "fit",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "trainingColIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "labelColIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLogisticRegression",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "analyticsData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "labels",
          "type": "int256[]"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLogisticRegressionOffChainData",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "weights",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xab0614d9262c25ea33c74645a7a155b9d0d74cd61670391db47536e5ef50c4a1",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0x2441883A4652526324B2D155f6C81c3DDC1Eb59f",
    "transactionIndex": 0,
    "gasUsed": "58457099",
    "logsBloom": "0xffeffffffffffffffdfffff77ffff7fefffffffffef7efbe7ffffffffffffbdffffffdfd7fffeffbf7dfffffff7bffffffbfffffffffdfedffbfdffffefffffffffffffeefdfffdf6ffffdfffbffff3efeffefff7feeffffefffffbffffffff9ffffffffdffff7fff7fffffeffffff7bfffeeeff7fffffffffbf7dffffbfffffbfffffffdfffdfffc7fffffffdfefed7ffffffffffffdfbf7ffffefffffffffbbffffe7fffffbfff7ff3ffffffcfbff3ffffeffffffffbfffffeefffffffffeffffffffffffdfffffffefffffbfffffdbf7feffdffffefffffefbbbffeffffd7ffffffdff7fffff7fffdff7fefffffffefff7ffffffffbfffffffeffffffffff",
    "blockHash": "0xa7dc0d97b8bc40c7947c48815f1e5d0bb6b05264115bf701ab4aba730017e17f",
    "transactionHash": "0xab0614d9262c25ea33c74645a7a155b9d0d74cd61670391db47536e5ef50c4a1",
    "logs": [],
    "blockNumber": 1640841,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD905BD593fD603F4309CB686f9a11DC881483e1"
  ],
  "numDeployments": 1,
  "solcInputHash": "1650751a76e75d6c6a647086b5dd40c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"y\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"fit\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"trainingColIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"labelColIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLogisticRegression\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"analyticsData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"labels\",\"type\":\"int256[]\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLogisticRegressionOffChainData\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"weights\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"params\":{\"X\":\"- The training features.\",\"y\":\"- The training labels.\"}},\"predict(int256[][],int256[],int256)\":{\"params\":{\"X\":\"- The input features.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"notice\":\"Fits the logistic regression model to the training data\"},\"predict(int256[][],int256[],int256)\":{\"notice\":\"Predicts the labels for the given input data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LogisticRegression.sol\":\"LogisticRegression\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x018bc280bd319aeeb71d64238d8876969c7b42663df00fff356b1d02692d4b51\",\"license\":\"MIT\"},\"contracts/LogisticRegression.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract LogisticRegression {\\n\\tDataLayer dataLayer;\\n\\n\\tint256 constant FIXED_POINT = 1e9; // Scaling factor for fixed-point arithmetic\\n\\n\\tconstructor(DataLayer _dataLayer) {\\n\\t\\tdataLayer = _dataLayer;\\n\\t}\\n\\n  // Get linear regression for onchain schema data\\n\\tfunction getLogisticRegression(\\n\\t\\tbytes32 schemaName,\\n    uint256[] memory trainingColIndices,\\n\\t\\tuint256 labelColIndex,\\n    int256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public view returns (int256[] memory) {\\n\\t\\tuint256[][] memory analyticsData = dataLayer\\n\\t\\t\\t.getAnalyticsDataBySchemaName(schemaName);\\n\\n    int256[][] memory trainingData = new int256[][](analyticsData.length);\\n\\n\\t\\tint256[] memory labels = new int256[](analyticsData.length);\\n\\n\\t\\tfor (uint256 i = 1; i < analyticsData.length; i++) {\\n      trainingData[i] = new int256[](trainingColIndices.length);\\n\\t\\t\\tlabels[i] = int256(analyticsData[i][labelColIndex]) * FIXED_POINT;\\n\\n      for (uint256 j = 0; j < trainingColIndices.length; j++) {\\n        trainingData[i][j] = int256(analyticsData[i][trainingColIndices[j]]) * FIXED_POINT;\\n      }\\n\\t\\t}\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\ttrainingData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, weights, bias);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\tfunction getLogisticRegressionOffChainData(\\n\\t\\tint256[][] memory analyticsData,\\n\\t\\tint256[] memory labels,\\n\\t\\tint256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\tanalyticsData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, weights, bias);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\t/**\\n\\t * Fits the logistic regression model to the training data\\n\\t * @param X - The training features.\\n\\t * @param y - The training labels.\\n\\t */\\n\\tfunction fit(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory y,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\trequire(\\n\\t\\t\\tX.length == y.length,\\n\\t\\t\\t\\\"Feature and label arrays must have the same length.\\\"\\n\\t\\t);\\n\\n\\t\\t// Initialize weights\\n\\t\\tint256[] memory weights = new int256[](X[0].length);\\n\\n\\t\\tfor (uint256 iter = 0; iter < iterations; iter++) {\\n\\t\\t\\tint256[] memory linearModel = new int256[](X.length);\\n\\t\\t\\tint256[] memory predictions = new int256[](X.length);\\n\\t\\t\\tint256[] memory dw = new int256[](X[0].length);\\n\\t\\t\\tint256 db = 0;\\n\\n\\t\\t\\t// Compute linear model and predictions\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tlinearModel[i] = bias;\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tlinearModel[i] += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpredictions[i] = sigmoid(linearModel[i]);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Compute gradients\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 error = predictions[i] - y[i];\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tdw[j] += (X[i][j] * error) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdb += error;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Update weights and bias\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tweights[j] -= (learningRate * dw[j]) / (int256(X.length) * FIXED_POINT);\\n\\t\\t\\t}\\n\\t\\t\\tbias -= (learningRate * db) / (int256(X.length) * FIXED_POINT);\\n\\t\\t}\\n\\n\\t\\treturn weights;\\n\\t}\\n\\n\\t/**\\n\\t * Predicts the labels for the given input data\\n\\t * @param X - The input features.\\n\\t */\\n\\tfunction predict(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory weights,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tuint256 m = X.length;\\n\\t\\tint256[] memory predictions = new int256[](m);\\n\\n\\t\\tfor (uint256 i = 0; i < m; i++) {\\n\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tpredictions[i] = sigmoid(linearModel) > (FIXED_POINT / int256(2))\\n\\t\\t\\t\\t? int256(1 * FIXED_POINT)\\n\\t\\t\\t\\t: int256(0);\\n\\t\\t}\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\t/**\\n\\t * Sigmoid function\\n\\t * @param z - The input value.\\n\\t */\\n\\tfunction sigmoid(int256 z) internal pure returns (int256) {\\n\\t\\tint256 expValue = exp(z);\\n\\t\\treturn (expValue * FIXED_POINT) / (FIXED_POINT + expValue);\\n\\t}\\n\\n\\t/**\\n\\t * Exponential function approximation\\n\\t * @param x - The input value.\\n\\t */\\n\\tfunction exp(int256 x) internal pure returns (int256) {\\n\\t\\tint256 sum = FIXED_POINT;\\n\\t\\tint256 term = FIXED_POINT;\\n\\t\\tfor (int256 i = 1; i < 30; i++) {\\n\\t\\t\\tterm = (term * x) / int256(i * FIXED_POINT);\\n\\t\\t\\tsum += term;\\n\\t\\t}\\n\\t\\treturn sum;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa090b59409b62ac85b43558d114f79d4a2a6d817fac428b6c16d74839fbdd8b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f610c7338819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b031916919091179055604051610be390816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c80631bb0da8a14610482578063348920fa14610428578063a9a56292146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105b7565b936024359182116100c35750926100a26100b3926100bf95369101610554565b6084359160643591604435916107a3565b90515191829182610638565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760e03660031901126100c35767ffffffffffffffff926024358481116100ca57366023820112156100ca57808201359261010e8461053c565b9261011c8651519485610504565b84845260a09260208452602085016024600597881b830101913683116100c657602401905b828210610418575050506064358781116100ca5761016290369083016105b7565b9660c435958360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561040d578493610303575b505050928351926101ac8461053c565b936101ba8851519586610504565b8085526101c9601f199161053c565b0190835b8281106102f0575050506101e18451610673565b9360019260443584805b610212575b6100bf8a6100b38b8e61020c828e8e60a43591608435916107a3565b90610a6b565b83518110156102eb57908493929161022b879651610673565b610235828a6106ed565b5261024081896106ed565b5061025e6102588361025284886106ed565b516106ed565b51610701565b610268828b6106ed565b5282865b610285575b5061027b906106a5565b90919293946101eb565b8886979293949596518210156102de57906102d2916102cc82610252876102c66102588e6102bf8f6102b88689926106ed565b51926106ed565b51906106ed565b946106ed565b526106a5565b8196959493929161026c565b5095949392919095610271565b6101f0565b81516060878301909101528151016101cd565b909192503d8085833e6103168183610504565b8101908551818303126100c65780519084821161040957019181601f840112156100c6578251916103468361053c565b946103548b51519687610504565b8386528751948580880195851b82010195838711610405578101945b868610610386575050505050505038808061019c565b855183811161040157820184603f82011215610401578a51810151908e6103ac8361053c565b926103ba8251519485610504565b8084528d518401915180918a1b840101928884116103fd5701905b8282106103ed57505050815289519586019501610370565b815181528d5191820191016103d5565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610141565b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761045990369084016105b7565b936024359182116100c35750926104796100b3926100bf95369101610554565b60443591610a6b565b50346100ca5760c03660031901126100ca5767ffffffffffffffff9080358281116100c6576104b490369083016105b7565b91602435818111610409576104cc9036908401610554565b946044359182116100c357509161020c6104f06100bf96936100b3953691016105b7565b9160a43593849160843591606435916107a3565b90601f8019910116810190811067ffffffffffffffff82111761052657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105265760051b60200190565b81601f820112156105b25780359161056b8361053c565b926105796040519485610504565b808452602092838086019260051b8201019283116105b2578301905b8282106105a3575050505090565b81358152908301908301610595565b600080fd5b9080601f830112156105b2578135906105cf8261053c565b926105dd6040519485610504565b828452602092838086019160051b830101928084116105b257848301915b84831061060b5750505050505090565b823567ffffffffffffffff81116105b257869161062d84848094890101610554565b8152019201916105fb565b6020908160408183019282815285518094520193019160005b82811061065f575050505090565b835185529381019392810192600101610651565b9061067d8261053c565b61068a6040519182610504565b828152809261069b601f199161053c565b0190602036910137565b60001981146106b45760010190565b634e487b7160e01b600052601160045260246000fd5b8051156106d75760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106d75760209160051b010190565b90633b9aca00918281029281840514901517156106b457565b818102929160008212600160ff1b8214166106b45781840514901517156106b457565b811561075857600160ff1b81146000198314166106b4570590565b634e487b7160e01b600052601260045260246000fd5b919091600083820193841291129080158216911516176106b457565b818103929160001380158285131691841216176106b457565b93929190938051855103610a0a5790936107c66107bf836106ca565b5151610673565b946000935b8085106107db5750505050505090565b6107eb8495979498969851610673565b976107f68651610673565b976108036107bf886106ca565b6000936001995b89518b10156108b5578c90856108208d846106ed565b52865b8d61082d8d6106ca565b515182101561088a5750808d6102cc61087e8f8f633b9aca0091610866876102528861085f6108859c61086d976106ed565b51946106ed565b519061071a565b0561087884896106ed565b5161076e565b91866106ed565b610823565b90506102cc8d6108a981949f6108a3906108af976106ed565b51610b23565b926106ed565b9961080a565b9b5097969098509891909394929860019a5b87518c1015610962576108f08c6108e96108e182886106ed565b5191886106ed565b519061078a565b9860005b6108fd8a6106ca565b515181101561094257808c8f826108a98f8f633b9aca009161092c61093d996102526102cc98610932956106ed565b5161071a565b0561087883866106ed565b6108f4565b509b9a61095a9192996109549161076e565b9a6106a5565b9a97906108c7565b9250979495969098995060005b610978886106ca565b51518110156109ce57806109bf6109af61099f6109986109c9958b6106ed565b518b61071a565b6109a98c51610701565b9061073d565b6109b9838d6106ed565b5161078a565b6102cc828c6106ed565b61096f565b5095935097610a00919296976109f46109ea6109fa938861071a565b6109a98751610701565b9061078a565b956106a5565b93929091926107cb565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190918051610a7981610673565b936000915b808310610a8d57505050505090565b909192939586916000925b610aa1876106ca565b5151841015610adf57610ad3610ad991633b9aca00610acc8a610866896102528d61085f838f6106ed565b059061076e565b936106a5565b92610a98565b610b1592989350610af9631dcd6500919796929597610b23565b13600090600014610b1e5750633b9aca005b6102cc82896106ed565b91939093610a7e565b610b0b565b633b9aca008060019283925b601e8412610b605750509050610b4481610701565b9181633b9aca0001918212166106b457610b5d9161073d565b90565b610b79610b7083610b809361071a565b6109a986610701565b809361076e565b926001600160ff1b038114610b985784019291610b2f565b60246000634e487b7160e01b81526011600452fdfea2646970667358221220f5127302bfdef55773dd10417e22a6797f1e87b820897a6687ace6433654d10764736f6c63430008110033",
  "deployedBytecode": "0x60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c80631bb0da8a14610482578063348920fa14610428578063a9a56292146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105b7565b936024359182116100c35750926100a26100b3926100bf95369101610554565b6084359160643591604435916107a3565b90515191829182610638565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760e03660031901126100c35767ffffffffffffffff926024358481116100ca57366023820112156100ca57808201359261010e8461053c565b9261011c8651519485610504565b84845260a09260208452602085016024600597881b830101913683116100c657602401905b828210610418575050506064358781116100ca5761016290369083016105b7565b9660c435958360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561040d578493610303575b505050928351926101ac8461053c565b936101ba8851519586610504565b8085526101c9601f199161053c565b0190835b8281106102f0575050506101e18451610673565b9360019260443584805b610212575b6100bf8a6100b38b8e61020c828e8e60a43591608435916107a3565b90610a6b565b83518110156102eb57908493929161022b879651610673565b610235828a6106ed565b5261024081896106ed565b5061025e6102588361025284886106ed565b516106ed565b51610701565b610268828b6106ed565b5282865b610285575b5061027b906106a5565b90919293946101eb565b8886979293949596518210156102de57906102d2916102cc82610252876102c66102588e6102bf8f6102b88689926106ed565b51926106ed565b51906106ed565b946106ed565b526106a5565b8196959493929161026c565b5095949392919095610271565b6101f0565b81516060878301909101528151016101cd565b909192503d8085833e6103168183610504565b8101908551818303126100c65780519084821161040957019181601f840112156100c6578251916103468361053c565b946103548b51519687610504565b8386528751948580880195851b82010195838711610405578101945b868610610386575050505050505038808061019c565b855183811161040157820184603f82011215610401578a51810151908e6103ac8361053c565b926103ba8251519485610504565b8084528d518401915180918a1b840101928884116103fd5701905b8282106103ed57505050815289519586019501610370565b815181528d5191820191016103d5565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610141565b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761045990369084016105b7565b936024359182116100c35750926104796100b3926100bf95369101610554565b60443591610a6b565b50346100ca5760c03660031901126100ca5767ffffffffffffffff9080358281116100c6576104b490369083016105b7565b91602435818111610409576104cc9036908401610554565b946044359182116100c357509161020c6104f06100bf96936100b3953691016105b7565b9160a43593849160843591606435916107a3565b90601f8019910116810190811067ffffffffffffffff82111761052657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105265760051b60200190565b81601f820112156105b25780359161056b8361053c565b926105796040519485610504565b808452602092838086019260051b8201019283116105b2578301905b8282106105a3575050505090565b81358152908301908301610595565b600080fd5b9080601f830112156105b2578135906105cf8261053c565b926105dd6040519485610504565b828452602092838086019160051b830101928084116105b257848301915b84831061060b5750505050505090565b823567ffffffffffffffff81116105b257869161062d84848094890101610554565b8152019201916105fb565b6020908160408183019282815285518094520193019160005b82811061065f575050505090565b835185529381019392810192600101610651565b9061067d8261053c565b61068a6040519182610504565b828152809261069b601f199161053c565b0190602036910137565b60001981146106b45760010190565b634e487b7160e01b600052601160045260246000fd5b8051156106d75760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106d75760209160051b010190565b90633b9aca00918281029281840514901517156106b457565b818102929160008212600160ff1b8214166106b45781840514901517156106b457565b811561075857600160ff1b81146000198314166106b4570590565b634e487b7160e01b600052601260045260246000fd5b919091600083820193841291129080158216911516176106b457565b818103929160001380158285131691841216176106b457565b93929190938051855103610a0a5790936107c66107bf836106ca565b5151610673565b946000935b8085106107db5750505050505090565b6107eb8495979498969851610673565b976107f68651610673565b976108036107bf886106ca565b6000936001995b89518b10156108b5578c90856108208d846106ed565b52865b8d61082d8d6106ca565b515182101561088a5750808d6102cc61087e8f8f633b9aca0091610866876102528861085f6108859c61086d976106ed565b51946106ed565b519061071a565b0561087884896106ed565b5161076e565b91866106ed565b610823565b90506102cc8d6108a981949f6108a3906108af976106ed565b51610b23565b926106ed565b9961080a565b9b5097969098509891909394929860019a5b87518c1015610962576108f08c6108e96108e182886106ed565b5191886106ed565b519061078a565b9860005b6108fd8a6106ca565b515181101561094257808c8f826108a98f8f633b9aca009161092c61093d996102526102cc98610932956106ed565b5161071a565b0561087883866106ed565b6108f4565b509b9a61095a9192996109549161076e565b9a6106a5565b9a97906108c7565b9250979495969098995060005b610978886106ca565b51518110156109ce57806109bf6109af61099f6109986109c9958b6106ed565b518b61071a565b6109a98c51610701565b9061073d565b6109b9838d6106ed565b5161078a565b6102cc828c6106ed565b61096f565b5095935097610a00919296976109f46109ea6109fa938861071a565b6109a98751610701565b9061078a565b956106a5565b93929091926107cb565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190918051610a7981610673565b936000915b808310610a8d57505050505090565b909192939586916000925b610aa1876106ca565b5151841015610adf57610ad3610ad991633b9aca00610acc8a610866896102528d61085f838f6106ed565b059061076e565b936106a5565b92610a98565b610b1592989350610af9631dcd6500919796929597610b23565b13600090600014610b1e5750633b9aca005b6102cc82896106ed565b91939093610a7e565b610b0b565b633b9aca008060019283925b601e8412610b605750509050610b4481610701565b9181633b9aca0001918212166106b457610b5d9161073d565b90565b610b79610b7083610b809361071a565b6109a986610701565b809361076e565b926001600160ff1b038114610b985784019291610b2f565b60246000634e487b7160e01b81526011600452fdfea2646970667358221220f5127302bfdef55773dd10417e22a6797f1e87b820897a6687ace6433654d10764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "params": {
          "X": "- The training features.",
          "y": "- The training labels."
        }
      },
      "predict(int256[][],int256[],int256)": {
        "params": {
          "X": "- The input features."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "notice": "Fits the logistic regression model to the training data"
      },
      "predict(int256[][],int256[],int256)": {
        "notice": "Predicts the labels for the given input data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 987,
        "contract": "contracts/LogisticRegression.sol:LogisticRegression",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)981"
      }
    ],
    "types": {
      "t_contract(DataLayer)981": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      }
    }
  }
}