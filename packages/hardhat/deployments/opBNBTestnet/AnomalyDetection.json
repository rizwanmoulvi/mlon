{
  "address": "0x30F8Aca0d1d7776200d9faD39B7cFe58A228D723",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "getAnomalyDetection",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "analyticsData",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "getAnomalyDetectionOffChainData",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x71c3c03555980be88f84e334c8fa469d8193c89d106f6e2298273958838c6939",
  "receipt": {
    "to": null,
    "from": "0x104FE0b8b7B054D5a02cFEe7cE0eC4f4c71a88DC",
    "contractAddress": "0x30F8Aca0d1d7776200d9faD39B7cFe58A228D723",
    "transactionIndex": 1,
    "gasUsed": "581928",
    "logsBloom": "0x
    "blockHash": "0x23e323b8e73c2bde463887374b06cdab4d319054f84ff3cdba0320b3a043115e",
    "transactionHash": "0x71c3c03555980be88f84e334c8fa469d8193c89d106f6e2298273958838c6939",
    "logs": [],
    "blockNumber": 37191772,
    "cumulativeGasUsed": "631367",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1FF077B9f023CA6FDE5d299B7ab758E6f93B5D68"
  ],
  "numDeployments": 3,
  "solcInputHash": "19609204036b5cf7008b569ad08610fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"getAnomalyDetection\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"analyticsData\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"getAnomalyDetectionOffChainData\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnomalyDetection.sol\":\"AnomalyDetection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AnomalyDetection.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract AnomalyDetection {\\n\\tDataLayer dataLayer;\\n\\n\\tconstructor(DataLayer _dataLayer) {\\n\\t\\tdataLayer = _dataLayer;\\n\\t}\\n\\n  // Get anomaly detection for any schema data\\n  function getAnomalyDetection(bytes32 schemaName, uint256 threshold) public view returns(uint256[][] memory) {\\n    uint256[][] memory analyticsData = dataLayer.getAnalyticsDataBySchemaName(schemaName);\\n\\n    uint256[] memory means = calculateMean(analyticsData);\\n\\n    uint256[] memory stdDevs = calculateStdDev(analyticsData, means);\\n\\n    uint256[][] memory predictions = detectAnomalies(analyticsData, means, stdDevs, threshold);\\n\\n    return predictions;\\n  }\\n\\n  // Get anomaly detection for any offchain data\\n  function getAnomalyDetectionOffChainData(uint256[][] memory analyticsData, uint256 threshold) public pure returns(uint256[][] memory) {\\n\\n    uint256[] memory means = calculateMean(analyticsData);\\n\\n    uint256[] memory stdDevs = calculateStdDev(analyticsData, means);\\n\\n    uint256[][] memory predictions = detectAnomalies(analyticsData, means, stdDevs, threshold);\\n\\n    return predictions;\\n  }\\n\\n\\n  function detectAnomalies(\\n\\t\\tuint256[][] memory data,\\n\\t\\tuint256[] memory means,\\n\\t\\tuint256[] memory stddevs,\\n\\t\\tuint256 threshold\\n\\t) internal pure returns (uint256[][] memory) {\\n\\t\\tuint256[] memory anomalies = new uint256[](data.length);\\n\\t\\tuint256 numColumns = data[1].length;\\n\\n\\t\\tuint256 idx = 0;\\n\\t\\tfor (uint i = 1; i < data.length; i++) {\\n\\t\\t\\tif (isAnomalous(numColumns, data[i], means, stddevs, threshold)) {\\n\\t\\t\\t\\tanomalies[idx] = i;\\n\\t\\t\\t\\tidx += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n    uint256[][] memory anomalousRows = new uint256[][](idx);\\n    for (uint256 i = 0; i < idx; i++) {\\n      anomalousRows[i] = data[anomalies[i]];\\n    }\\n\\t\\t\\n    return anomalousRows;\\n\\t}\\n\\n\\tfunction isAnomalous(\\n\\t\\tuint256 numColumns,\\n\\t\\tuint256[] memory values,\\n\\t\\tuint256[] memory means,\\n\\t\\tuint256[] memory stddevs,\\n\\t\\tuint256 threshold\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(values.length == numColumns, \\\"Incorrect number of columns\\\");\\n\\t\\tfor (uint j = 0; j < numColumns; j++) {\\n\\t\\t\\tuint diff = values[j] > means[j]\\n\\t\\t\\t\\t? values[j] - means[j]\\n\\t\\t\\t\\t: means[j] - values[j];\\n\\t\\t\\tif (diff * 100 > (threshold * stddevs[j])) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t\\n\\n\\t/**\\n\\t * @dev Calculate mean of a matrix\\n\\t */\\n\\tfunction calculateMean(\\n\\t\\tuint256[][] memory data\\n\\t) internal pure returns (uint256[] memory) {\\n\\t\\tuint256 numColumns = data[1].length;\\n\\t\\tuint256[] memory sums = new uint256[](numColumns);\\n\\t\\tfor (uint i = 0; i < data.length; i++) {\\n\\t\\t\\tfor (uint j = 0; j < numColumns; j++) {\\n\\t\\t\\t\\tsums[j] += data[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256[] memory means = new uint256[](numColumns);\\n\\t\\tfor (uint j = 0; j < numColumns; j++) {\\n\\t\\t\\tmeans[j] = sums[j] / data.length;\\n\\t\\t}\\n\\n\\t\\treturn means;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculate standard deviation of a matrix\\n\\t */\\n\\tfunction calculateStdDev(\\n\\t\\tuint256[][] memory data,\\n\\t\\tuint256[] memory means\\n\\t) internal pure returns (uint256[] memory) {\\n\\t\\tuint256 numColumns = data[1].length;\\n\\t\\tuint[] memory sumSquares = new uint[](numColumns);\\n\\n\\t\\tfor (uint i = 0; i < data.length; i++) {\\n\\t\\t\\tfor (uint j = 0; j < numColumns; j++) {\\n\\t\\t\\t\\tuint diff = data[i][j] > means[j]\\n\\t\\t\\t\\t\\t? data[i][j] - means[j]\\n\\t\\t\\t\\t\\t: means[j] - data[i][j];\\n\\t\\t\\t\\tsumSquares[j] += diff * diff;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256[] memory stddevs = new uint256[](numColumns);\\n\\t\\tfor (uint j = 0; j < numColumns; j++) {\\n\\t\\t\\tstddevs[j] = sqrt(sumSquares[j] / data.length);\\n\\t\\t}\\n\\n\\t\\treturn stddevs;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the square root of a number.\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256) {\\n\\t\\tuint256 z = (x + 1) / 2;\\n\\t\\tuint256 y = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = ((x / z) + z) / 2;\\n\\t\\t}\\n\\t\\treturn y;\\n\\t}\\n}\\n\",\"keccak256\":\"0x9d235684bdbe7d38cca5b25a7f63a1b5812645720ca55a21a3e0051c92b5fd48\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\n    uint256[][] public userActivityMatrix;\\n    mapping(address => uint256) public addressToId;\\n    mapping(uint256 => address) public idToAddress;\\n    mapping(address => uint256) public consumerCredits;\\n    mapping(bytes32 => uint256) public schemaIndex;\\n    uint256 public latestIndex;\\n    uint256 public totalCategories;\\n\\n    enum Category {\\n        Gaming,\\n        Marketplace,\\n        Defi,\\n        Dao,\\n        Web3Social,\\n        Identity,\\n        Certificates\\n    }\\n\\n    struct SchemaDetails {\\n        bytes32 schemaName;\\n        bytes32[] columns;\\n        Category schemaCategory;\\n        uint256 totalRecords;\\n    }\\n\\n    struct Analytics {\\n        bytes32 schemaName;\\n        bytes32[] columns;\\n        Category schemaCategory;\\n        uint256[][] data;\\n        mapping(address => uint256) addressToId;\\n        mapping(uint256 => address) idToAddress;\\n        mapping(bytes32 => uint256) columnToIndex;\\n    }\\n\\n    Analytics[] public dappAnalytics;\\n\\n    constructor() Ownable() {\\n        uint256[] memory initialMatrix;\\n        userActivityMatrix.push(initialMatrix);\\n        latestIndex = 0;\\n        totalCategories = 7;\\n        dappAnalytics.push();\\n    }\\n\\n    event NewAnalytics(address user, address provider, uint256 category);\\n\\n    function addUser(address userAddress) external {\\n        latestIndex = latestIndex + 1;\\n        uint256[] memory initialMatrix;\\n        userActivityMatrix.push(initialMatrix);\\n\\n        for (uint256 i = 0; i < totalCategories; i++) {\\n            userActivityMatrix[latestIndex].push(0);\\n        }\\n\\n        addressToId[userAddress] = latestIndex;\\n        idToAddress[latestIndex] = userAddress;\\n    }\\n\\n    function addSchema(\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        Category category\\n    ) external {\\n        require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n        Analytics storage analytics = dappAnalytics.push();\\n        analytics.schemaName = schemaName;\\n        analytics.schemaCategory = category;\\n\\n        uint256[] memory initialUser;\\n        analytics.data.push(initialUser);\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            analytics.data[0].push(0);\\n            analytics.columns.push(columns[i]);\\n            analytics.columnToIndex[columns[i]] = i;\\n        }\\n\\n        schemaIndex[schemaName] = dappAnalytics.length - 1;\\n    }\\n\\n    function addAnalytics(\\n        address userAddress,\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        uint256[] calldata data\\n    ) public {\\n        require(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n        if (addressToId[userAddress] == 0) {\\n            this.addUser(userAddress);\\n        }\\n\\n        Analytics storage schemaAnalytics = dappAnalytics[\\n            schemaIndex[schemaName]\\n        ];\\n\\n        if (schemaAnalytics.addressToId[userAddress] == 0) {\\n            schemaAnalytics.data.push();\\n            for (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n                schemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n            }\\n\\n            schemaAnalytics.addressToId[userAddress] =\\n                schemaAnalytics.data.length - 1;\\n            schemaAnalytics.idToAddress[\\n                schemaAnalytics.data.length - 1\\n            ] = userAddress;\\n        }\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            schemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n                schemaAnalytics.columnToIndex[columns[i]]\\n            ] += data[i];\\n        }\\n\\n        userActivityMatrix[addressToId[userAddress]][\\n            uint256(schemaAnalytics.schemaCategory)\\n        ] += 1;\\n\\n        consumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n        emit NewAnalytics(\\n            userAddress,\\n            msg.sender,\\n            uint256(schemaAnalytics.schemaCategory)\\n        );\\n    }\\n\\n    function updateAnalytics(\\n        address userAddress,\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        uint256[] calldata data\\n    ) public {\\n        if (addressToId[userAddress] == 0) {\\n            this.addUser(userAddress);\\n        }\\n\\n        Analytics storage schemaAnalytics = dappAnalytics[\\n            schemaIndex[schemaName]\\n        ];\\n\\n        if (schemaAnalytics.addressToId[userAddress] == 0) {\\n            schemaAnalytics.data.push();\\n            for (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n                schemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n            }\\n\\n            schemaAnalytics.addressToId[userAddress] =\\n                schemaAnalytics.data.length - 1;\\n            schemaAnalytics.idToAddress[\\n                schemaAnalytics.data.length - 1\\n            ] = userAddress;\\n        }\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            schemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n                schemaAnalytics.columnToIndex[columns[i]]\\n            ] = data[i];\\n        }\\n\\n        userActivityMatrix[addressToId[userAddress]][\\n            uint256(schemaAnalytics.schemaCategory)\\n        ] += 1;\\n\\n        consumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n        emit NewAnalytics(\\n            userAddress,\\n            msg.sender,\\n            uint256(schemaAnalytics.schemaCategory)\\n        );\\n    }\\n\\n    function getUserActivityMatrix()\\n        external\\n        view\\n        returns (uint256[][] memory)\\n    {\\n        return userActivityMatrix;\\n    }\\n\\n    function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n        SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n        for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n            SchemaDetails memory schemaDetail;\\n            schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n            schemaDetail.columns = dappAnalytics[i].columns;\\n            schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n            schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n            schemaDetails[i - 1] = schemaDetail;\\n        }\\n\\n        return schemaDetails;\\n    }\\n\\n    function getAnalyticsDataBySchemaName(\\n        bytes32 schemaName\\n    ) external view returns (uint256[][] memory) {\\n        return dappAnalytics[schemaIndex[schemaName]].data;\\n    }\\n\\n    function getColumnsOfSchema(\\n        bytes32 schemaName\\n    ) external view returns (bytes32[] memory) {\\n        return dappAnalytics[schemaIndex[schemaName]].columns;\\n    }\\n\\n    function getSchemaAddressToId(\\n        bytes32 schemaName,\\n        address userAddress\\n    ) external view returns (uint256) {\\n        return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n    }\\n\\n    function getSchemaIdToAddress(\\n        bytes32 schemaName,\\n        uint256 userId\\n    ) external view returns (address) {\\n        return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb94c178feba2a453e61548dc7b2969c05b1d1595b53d13cd3f65c9718241104d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f6109ad38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b03191691909117905560405161091d90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c908163530ce0ad146101695750639a593a801461003857600080fd5b346101655780600319360112610165576004359167ffffffffffffffff808411610165573660238501121561016557836004013591610076836103c2565b916100838551938461038a565b83835260209081840160249586600591821b8a01019236841161016157878a01925b8484106100e0576100dc8a6100d18b8b6100be816106db565b9135916100cb818361079f565b91610478565b9051918291826102f8565b0390f35b833582811161015d578b013660438201121561015d578981013590610104826103c2565b916101118d51938461038a565b8083528883019060448091881b8401019236841161015957908a9492959391015b8181106101495750508293508152019301926100a5565b80358652948401948a9401610132565b8b80fd5b8780fd5b8580fd5b5080fd5b9050346102e957816003193601126102e9578254630596815760e21b825260048035908301528390829060249082906001600160a01b03165afa9283156102ed5780936101d1575b6100dc836100d1866101c2816106db565b90602435916100cb818361079f565b9092503d8082853e6101e3818561038a565b83019260209081818603126102e957805167ffffffffffffffff918282116102e557019085601f830112156102e15781519561021e876103c2565b9661022b8751988961038a565b8088528488019285600592831b8601019483861161015d57868101945b868610610263575050505050505050506100d16100dc6101b1565b85518381116102dd57820185603f820112156102dd578881015190610287826103c2565b916102948d51938461038a565b8083528c8b840191881b830101918883116102d957918d8c94929593015b8181106102c9575050829350815201950194610248565b80518652948401948c94016102b2565b8c80fd5b8980fd5b8380fd5b8480fd5b8280fd5b8251903d90823e3d90fd5b602080820190808352835180925260408301928160408460051b830101950193600080925b85841061032e575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b80821061037157505050908060019299019401940192959493919061031d565b9193806001929486518152019401920188939291610351565b90601f8019910116810190811067ffffffffffffffff8211176103ac57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116103ac5760051b60200190565b906103e4826103c2565b6103f1604051918261038a565b8281528092610402601f19916103c2565b0190602036910137565b80516001101561041c5760400190565b634e487b7160e01b600052603260045260246000fd5b805182101561041c5760209160051b010190565b60001981146104555760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161045557565b91909161048581516103da565b9361048f8261040c565b515190600093600195869384975b610538575b50505050509091506104b3826103c2565b926104c1604051948561038a565b828452601f196104d0846103c2565b0160005b81811061052757505060005b8381106104ee575050505090565b806105066104ff6105229385610432565b5185610432565b516105118288610432565b5261051c8187610432565b50610446565b6104e0565b8060606020809389010152016104d4565b8551881015610594576105588484846105518c8b610432565b51856105b9565b610571575b61056985969798610446565b97969561049d565b87610580888b99979899610432565b52858501809511610455579395949361055d565b6104a2565b9190820391821161045557565b8181029291811591840414171561045557565b939291848251036106765760005b8581106105d957505050505050600090565b6105e38184610432565b516105ee8284610432565b511015610659576106146106028285610432565b5161060d8385610432565b5190610599565b6064908181029181830414901517156104555761063b6106348387610432565b51876105a6565b1061064e5761064990610446565b6105c7565b505050505050600190565b6106716106668284610432565b5161060d8386610432565b610614565b60405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f6620636f6c756d6e7300000000006044820152606490fd5b81156106c5570490565b634e487b7160e01b600052601260045260246000fd5b6106e48161040c565b5151906106f0826103da565b9060005b81518110156107575760005b848110610716575061071190610446565b6106f4565b806107426107316107529361072b8688610432565b51610432565b5161073c8388610432565b5161046b565b61074c8287610432565b52610446565b610700565b50919091610764826103da565b9260005b838110610776575050505090565b8061079061078761079a9385610432565b518551906106bb565b61074c8288610432565b610768565b6107a88161040c565b5151916107b4836103da565b9160005b815181101561085c5760005b8581106107da57506107d590610446565b6107b8565b806107ec6108309261072b8587610432565b516107f78287610432565b511015610835576107906108266108206108158461072b888a610432565b5161060d858a610432565b806105a6565b61073c8389610432565b6107c4565b6107906108266108576108488489610432565b5161060d8561072b898b610432565b610820565b50905091909161086b826103da565b9260005b83811061087d575050505090565b61089361088a8284610432565b518451906106bb565b600180820180831161045557819392911c815b8282106108c35750506108be925061074c8288610432565b61086f565b915091926108da836108d581856106bb565b61046b565b811c9193929190936108a656fea264697066735822122012df381eac902272c4b5ce59ca2cb66d4e9570529871f9a74f441f88b0d58bde64736f6c63430008110033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c908163530ce0ad146101695750639a593a801461003857600080fd5b346101655780600319360112610165576004359167ffffffffffffffff808411610165573660238501121561016557836004013591610076836103c2565b916100838551938461038a565b83835260209081840160249586600591821b8a01019236841161016157878a01925b8484106100e0576100dc8a6100d18b8b6100be816106db565b9135916100cb818361079f565b91610478565b9051918291826102f8565b0390f35b833582811161015d578b013660438201121561015d578981013590610104826103c2565b916101118d51938461038a565b8083528883019060448091881b8401019236841161015957908a9492959391015b8181106101495750508293508152019301926100a5565b80358652948401948a9401610132565b8b80fd5b8780fd5b8580fd5b5080fd5b9050346102e957816003193601126102e9578254630596815760e21b825260048035908301528390829060249082906001600160a01b03165afa9283156102ed5780936101d1575b6100dc836100d1866101c2816106db565b90602435916100cb818361079f565b9092503d8082853e6101e3818561038a565b83019260209081818603126102e957805167ffffffffffffffff918282116102e557019085601f830112156102e15781519561021e876103c2565b9661022b8751988961038a565b8088528488019285600592831b8601019483861161015d57868101945b868610610263575050505050505050506100d16100dc6101b1565b85518381116102dd57820185603f820112156102dd578881015190610287826103c2565b916102948d51938461038a565b8083528c8b840191881b830101918883116102d957918d8c94929593015b8181106102c9575050829350815201950194610248565b80518652948401948c94016102b2565b8c80fd5b8980fd5b8380fd5b8480fd5b8280fd5b8251903d90823e3d90fd5b602080820190808352835180925260408301928160408460051b830101950193600080925b85841061032e575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b80821061037157505050908060019299019401940192959493919061031d565b9193806001929486518152019401920188939291610351565b90601f8019910116810190811067ffffffffffffffff8211176103ac57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116103ac5760051b60200190565b906103e4826103c2565b6103f1604051918261038a565b8281528092610402601f19916103c2565b0190602036910137565b80516001101561041c5760400190565b634e487b7160e01b600052603260045260246000fd5b805182101561041c5760209160051b010190565b60001981146104555760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161045557565b91909161048581516103da565b9361048f8261040c565b515190600093600195869384975b610538575b50505050509091506104b3826103c2565b926104c1604051948561038a565b828452601f196104d0846103c2565b0160005b81811061052757505060005b8381106104ee575050505090565b806105066104ff6105229385610432565b5185610432565b516105118288610432565b5261051c8187610432565b50610446565b6104e0565b8060606020809389010152016104d4565b8551881015610594576105588484846105518c8b610432565b51856105b9565b610571575b61056985969798610446565b97969561049d565b87610580888b99979899610432565b52858501809511610455579395949361055d565b6104a2565b9190820391821161045557565b8181029291811591840414171561045557565b939291848251036106765760005b8581106105d957505050505050600090565b6105e38184610432565b516105ee8284610432565b511015610659576106146106028285610432565b5161060d8385610432565b5190610599565b6064908181029181830414901517156104555761063b6106348387610432565b51876105a6565b1061064e5761064990610446565b6105c7565b505050505050600190565b6106716106668284610432565b5161060d8386610432565b610614565b60405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f6620636f6c756d6e7300000000006044820152606490fd5b81156106c5570490565b634e487b7160e01b600052601260045260246000fd5b6106e48161040c565b5151906106f0826103da565b9060005b81518110156107575760005b848110610716575061071190610446565b6106f4565b806107426107316107529361072b8688610432565b51610432565b5161073c8388610432565b5161046b565b61074c8287610432565b52610446565b610700565b50919091610764826103da565b9260005b838110610776575050505090565b8061079061078761079a9385610432565b518551906106bb565b61074c8288610432565b610768565b6107a88161040c565b5151916107b4836103da565b9160005b815181101561085c5760005b8581106107da57506107d590610446565b6107b8565b806107ec6108309261072b8587610432565b516107f78287610432565b511015610835576107906108266108206108158461072b888a610432565b5161060d858a610432565b806105a6565b61073c8389610432565b6107c4565b6107906108266108576108488489610432565b5161060d8561072b898b610432565b610820565b50905091909161086b826103da565b9260005b83811061087d575050505090565b61089361088a8284610432565b518451906106bb565b600180820180831161045557819392911c815b8282106108c35750506108be925061074c8288610432565b61086f565b915091926108da836108d581856106bb565b61046b565b811c9193929190936108a656fea264697066735822122012df381eac902272c4b5ce59ca2cb66d4e9570529871f9a74f441f88b0d58bde64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 140,
        "contract": "contracts/AnomalyDetection.sol:AnomalyDetection",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)1533"
      }
    ],
    "types": {
      "t_contract(DataLayer)1533": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      }
    }
  }
}