{
  "address": "0x65caDEed7CeE4bB71fDF72Fd1feEFd134fD6E292",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "y",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "fit",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "trainingColIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "labelColIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLinearRegression",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "analyticsData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "labels",
          "type": "int256[]"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLinearRegressionOffChainData",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256[]",
          "name": "weights",
          "type": "int256[]"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x905ad678b05d2a1117078b11faf987cc1cfc7ffae5fc5d3f83dcc900275a9202",
  "receipt": {
    "to": null,
    "from": "0x104FE0b8b7B054D5a02cFEe7cE0eC4f4c71a88DC",
    "contractAddress": "0x65caDEed7CeE4bB71fDF72Fd1feEFd134fD6E292",
    "transactionIndex": 2,
    "gasUsed": "694616",
    "logsBloom": "0x
    "blockHash": "0x49e65029cbfb709a1bde5613962852dca0deb2c12953b4649ad84bbd9416c718",
    "transactionHash": "0x905ad678b05d2a1117078b11faf987cc1cfc7ffae5fc5d3f83dcc900275a9202",
    "logs": [],
    "blockNumber": 37191779,
    "cumulativeGasUsed": "1957312",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1FF077B9f023CA6FDE5d299B7ab758E6f93B5D68"
  ],
  "numDeployments": 3,
  "solcInputHash": "19609204036b5cf7008b569ad08610fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"y\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"fit\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"trainingColIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"labelColIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLinearRegression\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"analyticsData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"labels\",\"type\":\"int256[]\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLinearRegressionOffChainData\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256[]\",\"name\":\"weights\",\"type\":\"int256[]\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"params\":{\"X\":\"- The training features.\",\"y\":\"- The training labels.\"}},\"predict(int256[][],int256,int256[])\":{\"params\":{\"X\":\"- The input features.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"notice\":\"Fits the linear regression model to the training data\"},\"predict(int256[][],int256,int256[])\":{\"notice\":\"Predicts the labels for the given input data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LinearRegression.sol\":\"LinearRegression\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\n    uint256[][] public userActivityMatrix;\\n    mapping(address => uint256) public addressToId;\\n    mapping(uint256 => address) public idToAddress;\\n    mapping(address => uint256) public consumerCredits;\\n    mapping(bytes32 => uint256) public schemaIndex;\\n    uint256 public latestIndex;\\n    uint256 public totalCategories;\\n\\n    enum Category {\\n        Gaming,\\n        Marketplace,\\n        Defi,\\n        Dao,\\n        Web3Social,\\n        Identity,\\n        Certificates\\n    }\\n\\n    struct SchemaDetails {\\n        bytes32 schemaName;\\n        bytes32[] columns;\\n        Category schemaCategory;\\n        uint256 totalRecords;\\n    }\\n\\n    struct Analytics {\\n        bytes32 schemaName;\\n        bytes32[] columns;\\n        Category schemaCategory;\\n        uint256[][] data;\\n        mapping(address => uint256) addressToId;\\n        mapping(uint256 => address) idToAddress;\\n        mapping(bytes32 => uint256) columnToIndex;\\n    }\\n\\n    Analytics[] public dappAnalytics;\\n\\n    constructor() Ownable() {\\n        uint256[] memory initialMatrix;\\n        userActivityMatrix.push(initialMatrix);\\n        latestIndex = 0;\\n        totalCategories = 7;\\n        dappAnalytics.push();\\n    }\\n\\n    event NewAnalytics(address user, address provider, uint256 category);\\n\\n    function addUser(address userAddress) external {\\n        latestIndex = latestIndex + 1;\\n        uint256[] memory initialMatrix;\\n        userActivityMatrix.push(initialMatrix);\\n\\n        for (uint256 i = 0; i < totalCategories; i++) {\\n            userActivityMatrix[latestIndex].push(0);\\n        }\\n\\n        addressToId[userAddress] = latestIndex;\\n        idToAddress[latestIndex] = userAddress;\\n    }\\n\\n    function addSchema(\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        Category category\\n    ) external {\\n        require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n        Analytics storage analytics = dappAnalytics.push();\\n        analytics.schemaName = schemaName;\\n        analytics.schemaCategory = category;\\n\\n        uint256[] memory initialUser;\\n        analytics.data.push(initialUser);\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            analytics.data[0].push(0);\\n            analytics.columns.push(columns[i]);\\n            analytics.columnToIndex[columns[i]] = i;\\n        }\\n\\n        schemaIndex[schemaName] = dappAnalytics.length - 1;\\n    }\\n\\n    function addAnalytics(\\n        address userAddress,\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        uint256[] calldata data\\n    ) public {\\n        require(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n        if (addressToId[userAddress] == 0) {\\n            this.addUser(userAddress);\\n        }\\n\\n        Analytics storage schemaAnalytics = dappAnalytics[\\n            schemaIndex[schemaName]\\n        ];\\n\\n        if (schemaAnalytics.addressToId[userAddress] == 0) {\\n            schemaAnalytics.data.push();\\n            for (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n                schemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n            }\\n\\n            schemaAnalytics.addressToId[userAddress] =\\n                schemaAnalytics.data.length - 1;\\n            schemaAnalytics.idToAddress[\\n                schemaAnalytics.data.length - 1\\n            ] = userAddress;\\n        }\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            schemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n                schemaAnalytics.columnToIndex[columns[i]]\\n            ] += data[i];\\n        }\\n\\n        userActivityMatrix[addressToId[userAddress]][\\n            uint256(schemaAnalytics.schemaCategory)\\n        ] += 1;\\n\\n        consumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n        emit NewAnalytics(\\n            userAddress,\\n            msg.sender,\\n            uint256(schemaAnalytics.schemaCategory)\\n        );\\n    }\\n\\n    function updateAnalytics(\\n        address userAddress,\\n        bytes32 schemaName,\\n        bytes32[] calldata columns,\\n        uint256[] calldata data\\n    ) public {\\n        if (addressToId[userAddress] == 0) {\\n            this.addUser(userAddress);\\n        }\\n\\n        Analytics storage schemaAnalytics = dappAnalytics[\\n            schemaIndex[schemaName]\\n        ];\\n\\n        if (schemaAnalytics.addressToId[userAddress] == 0) {\\n            schemaAnalytics.data.push();\\n            for (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n                schemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n            }\\n\\n            schemaAnalytics.addressToId[userAddress] =\\n                schemaAnalytics.data.length - 1;\\n            schemaAnalytics.idToAddress[\\n                schemaAnalytics.data.length - 1\\n            ] = userAddress;\\n        }\\n\\n        for (uint256 i = 0; i < columns.length; i++) {\\n            schemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n                schemaAnalytics.columnToIndex[columns[i]]\\n            ] = data[i];\\n        }\\n\\n        userActivityMatrix[addressToId[userAddress]][\\n            uint256(schemaAnalytics.schemaCategory)\\n        ] += 1;\\n\\n        consumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n        emit NewAnalytics(\\n            userAddress,\\n            msg.sender,\\n            uint256(schemaAnalytics.schemaCategory)\\n        );\\n    }\\n\\n    function getUserActivityMatrix()\\n        external\\n        view\\n        returns (uint256[][] memory)\\n    {\\n        return userActivityMatrix;\\n    }\\n\\n    function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n        SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n        for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n            SchemaDetails memory schemaDetail;\\n            schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n            schemaDetail.columns = dappAnalytics[i].columns;\\n            schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n            schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n            schemaDetails[i - 1] = schemaDetail;\\n        }\\n\\n        return schemaDetails;\\n    }\\n\\n    function getAnalyticsDataBySchemaName(\\n        bytes32 schemaName\\n    ) external view returns (uint256[][] memory) {\\n        return dappAnalytics[schemaIndex[schemaName]].data;\\n    }\\n\\n    function getColumnsOfSchema(\\n        bytes32 schemaName\\n    ) external view returns (bytes32[] memory) {\\n        return dappAnalytics[schemaIndex[schemaName]].columns;\\n    }\\n\\n    function getSchemaAddressToId(\\n        bytes32 schemaName,\\n        address userAddress\\n    ) external view returns (uint256) {\\n        return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n    }\\n\\n    function getSchemaIdToAddress(\\n        bytes32 schemaName,\\n        uint256 userId\\n    ) external view returns (address) {\\n        return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb94c178feba2a453e61548dc7b2969c05b1d1595b53d13cd3f65c9718241104d\",\"license\":\"MIT\"},\"contracts/LinearRegression.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract LinearRegression {\\n\\tDataLayer dataLayer;\\n\\n\\tint256 constant FIXED_POINT = 1e9; // Scaling factor for fixed-point arithmetic\\n\\n\\tconstructor(DataLayer _dataLayer) {\\n\\t\\tdataLayer = _dataLayer;\\n\\t}\\n\\n  // Get linear regression for onchain schema data\\n\\tfunction getLinearRegression(\\n\\t\\tbytes32 schemaName,\\n    uint256[] memory trainingColIndices,\\n\\t\\tuint256 labelColIndex,\\n    int256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public view returns (int256[] memory) {\\n\\t\\tuint256[][] memory analyticsData = dataLayer\\n\\t\\t\\t.getAnalyticsDataBySchemaName(schemaName);\\n\\n    int256[][] memory trainingData = new int256[][](analyticsData.length);\\n\\n\\t\\tint256[] memory labels = new int256[](analyticsData.length);\\n\\n\\t\\tfor (uint256 i = 1; i < analyticsData.length; i++) {\\n      trainingData[i] = new int256[](trainingColIndices.length);\\n\\t\\t\\tlabels[i] = int256(analyticsData[i][labelColIndex]) * FIXED_POINT;\\n\\n      for (uint256 j = 0; j < trainingColIndices.length; j++) {\\n        trainingData[i][j] = int256(analyticsData[i][trainingColIndices[j]]) * FIXED_POINT;\\n      }\\n\\t\\t}\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\ttrainingData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, bias, weights);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n  // Get linear regression for offchain data\\n  function getLinearRegressionOffChainData(\\n\\t\\tint256[][] memory analyticsData,\\n\\t\\tint256[] memory labels,\\n\\t\\tint256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\t\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\tanalyticsData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, bias, weights);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\n\\t/**\\n\\t * Fits the linear regression model to the training data\\n\\t * @param X - The training features.\\n\\t * @param y - The training labels.\\n\\t */\\n\\tfunction fit(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory y,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\trequire(\\n\\t\\t\\tX.length == y.length,\\n\\t\\t\\t\\\"Feature and label arrays must have the same length.\\\"\\n\\t\\t);\\n\\n\\t\\t// Initialize weights\\n\\t\\tint256[] memory weights = new int256[](X[0].length);\\n  \\n\\t\\tfor (uint256 iter = 0; iter < iterations; iter++) {\\n\\t\\t\\tint256[] memory predictions = new int256[](X.length);\\n\\t\\t\\tint256[] memory dw = new int256[](X[0].length);\\n\\t\\t\\tint256 db = 0;\\n\\n\\t\\t\\t// Compute predictions\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpredictions[i] = linearModel;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Compute gradients\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 error = predictions[i] - y[i];\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tdw[j] += (X[i][j] * error) / (int256(X.length) * FIXED_POINT);\\n\\t\\t\\t\\t}\\n        \\n\\t\\t\\t\\tdb += error / int256(X.length);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Update weights and bias\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tweights[j] -= (learningRate * dw[j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tbias -= (learningRate * db) / FIXED_POINT;\\n\\t\\t}\\n\\n\\t\\treturn weights;\\n\\t}\\n\\n\\t/**\\n\\t * Predicts the labels for the given input data\\n\\t * @param X - The input features.\\n\\t */\\n\\tfunction predict(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256 bias,\\n\\t\\tint256[] memory weights\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tuint256 m = X.length;\\n\\t\\tint256[] memory predictions = new int256[](m);\\n\\n\\t\\tfor (uint256 i = 0; i < m; i++) {\\n\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tpredictions[i] = linearModel;\\n\\t\\t}\\n\\n\\t\\treturn predictions;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1df6262a46be9e38f4073bdc651b23805d52e51fee3d8ffdd325ac56a9561cc0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f610bb738819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b031916919091179055604051610b2790816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c806330eba3ba146101b6578063ac9126a31461015b578063c9b76701146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105bc565b936024359182116100c35750926100a26100b3926100bf95369101610559565b6084359160643591604435916107a8565b9051519182918261063d565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760c03660031901126100c35767ffffffffffffffff9280358481116100ca5761010190369083016105bc565b93602435818111610157576101199036908401610559565b926044359182116100c357509161015161013d6100bf96936100b3953691016105bc565b9260a43592839160843591606435916107a8565b91610a5b565b8380fd5b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761018c90369084016105bc565b936044359182116100c35750926101ac6100b3926100bf95369101610559565b9060243590610a5b565b50346100ca5760e03660031901126100ca5767ffffffffffffffff906024358281116100c657366023820112156100c65780820135946101f586610541565b926102038651519485610509565b86845260a092602084526020850160246005998a1b830101913683116100c657602401905b8282106104f9575050506064358581116100ca5761024990369083016105bc565b9460c435978360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa9283156104ee5784936103e4575b5050509283519261029384610541565b936102a18851519586610509565b8085526102b0601f1991610541565b0190835b8281106103d1575050506102c88451610678565b9360019260443584805b6102f3575b6100bf8a6100b38b8e610151818e8e60a43591608435916107a8565b83518110156103cc57908493929161030c879651610678565b610316828a6106f2565b5261032181896106f2565b5061033f6103398361033384886106f2565b516106f2565b51610706565b610349828b6106f2565b5282865b610366575b5061035c906106aa565b90919293946102d2565b8886979293949596518210156103bf57906103b3916103ad82610333876103a76103398e6103a08f6103998689926106f2565b51926106f2565b51906106f2565b946106f2565b526106aa565b8196959493929161034d565b5095949392919095610352565b6102d7565b81516060878301909101528151016102b4565b909192503d8085833e6103f78183610509565b8101908551818303126100c6578051908482116104ea57019181601f840112156100c65782519161042783610541565b946104358b51519687610509565b8386528751948580880195851b820101958387116104e6578101945b8686106104675750505050505050388080610283565b85518381116104e257820184603f820112156104e2578a51810151908e61048d83610541565b9261049b8251519485610509565b8084528d518401915180918a1b840101928884116104de5701905b8282106104ce57505050815289519586019501610451565b815181528d5191820191016104b6565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610228565b90601f8019910116810190811067ffffffffffffffff82111761052b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161052b5760051b60200190565b81601f820112156105b75780359161057083610541565b9261057e6040519485610509565b808452602092838086019260051b8201019283116105b7578301905b8282106105a8575050505090565b8135815290830190830161059a565b600080fd5b9080601f830112156105b7578135906105d482610541565b926105e26040519485610509565b828452602092838086019160051b830101928084116105b757848301915b8483106106105750505050505090565b823567ffffffffffffffff81116105b757869161063284848094890101610559565b815201920191610600565b6020908160408183019282815285518094520193019160005b828110610664575050505090565b835185529381019392810192600101610656565b9061068282610541565b61068f6040519182610509565b82815280926106a0601f1991610541565b0190602036910137565b60001981146106b95760010190565b634e487b7160e01b600052601160045260246000fd5b8051156106dc5760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106dc5760209160051b010190565b90633b9aca00918281029281840514901517156106b957565b818102929160008212600160ff1b8214166106b95781840514901517156106b957565b811561075d57600160ff1b81146000198314166106b9570590565b634e487b7160e01b600052601260045260246000fd5b919091600083820193841291129080158216911516176106b957565b818103929160001380158285131691841216176106b957565b909281518451036109fa576107c96107c2839695966106cf565b5151610678565b9460005b8281106107dd5750505050505090565b6107ea8498939851610678565b956107f76107c2866106cf565b6000936001955b875187101561089057878b8b9c9d869c999a9b9c9389945b61081f856106cf565b515186101561086c5761086061086691633b9aca008f610859906108528b61033361084a828d6106f2565b51938d6106f2565b519061071f565b0590610773565b956106aa565b94610816565b9250949961088394508b93509a6103ad919b6106f2565b95909a999897969a6107fe565b979198929499909395509995996001965b8b5188101561096a57908392916108d06108be8a8f9998976106f2565b516108c98b886106f2565b519061078f565b9960005b6108dd896106cf565b515181101561093b57808d6103ad828f8f8e61091a6109136109309461090d6109369b61033361092097876106f2565b5161071f565b9151610706565b90610742565b61092a83866106f2565b51610773565b926106f2565b6108d4565b50989b610956610962939b61095c9395969798995190610742565b90610773565b9a6106aa565b9697906108a1565b93919a99949596509796915060005b6109828a6106cf565b51518110156109c557806109b6633b9aca006109a58e6108526109c0968e6106f2565b056109b0838d6106f2565b5161078f565b6103ad828c6106f2565b610979565b50969794926109ec9199965093633b9aca006109e56109f294968961071f565b059061078f565b916106aa565b9490946107cd565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190825192610a6984610678565b93600090815b818310610a7f5750505050505090565b849597919293949281935b610a93876106cf565b5151851015610ad257610ac6610acc91633b9aca006108598a6108528f6103338d610abf8e80946106f2565b51946106f2565b946106aa565b93610a8a565b610ae9929695919450989692986103ad828a6106f2565b919093610a6f56fea2646970667358221220d93bab15c7a455b7f85b383a066cc1720846c31055c60f0509c3dd83d9493f5764736f6c63430008110033",
  "deployedBytecode": "0x60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c806330eba3ba146101b6578063ac9126a31461015b578063c9b76701146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105bc565b936024359182116100c35750926100a26100b3926100bf95369101610559565b6084359160643591604435916107a8565b9051519182918261063d565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760c03660031901126100c35767ffffffffffffffff9280358481116100ca5761010190369083016105bc565b93602435818111610157576101199036908401610559565b926044359182116100c357509161015161013d6100bf96936100b3953691016105bc565b9260a43592839160843591606435916107a8565b91610a5b565b8380fd5b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761018c90369084016105bc565b936044359182116100c35750926101ac6100b3926100bf95369101610559565b9060243590610a5b565b50346100ca5760e03660031901126100ca5767ffffffffffffffff906024358281116100c657366023820112156100c65780820135946101f586610541565b926102038651519485610509565b86845260a092602084526020850160246005998a1b830101913683116100c657602401905b8282106104f9575050506064358581116100ca5761024990369083016105bc565b9460c435978360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa9283156104ee5784936103e4575b5050509283519261029384610541565b936102a18851519586610509565b8085526102b0601f1991610541565b0190835b8281106103d1575050506102c88451610678565b9360019260443584805b6102f3575b6100bf8a6100b38b8e610151818e8e60a43591608435916107a8565b83518110156103cc57908493929161030c879651610678565b610316828a6106f2565b5261032181896106f2565b5061033f6103398361033384886106f2565b516106f2565b51610706565b610349828b6106f2565b5282865b610366575b5061035c906106aa565b90919293946102d2565b8886979293949596518210156103bf57906103b3916103ad82610333876103a76103398e6103a08f6103998689926106f2565b51926106f2565b51906106f2565b946106f2565b526106aa565b8196959493929161034d565b5095949392919095610352565b6102d7565b81516060878301909101528151016102b4565b909192503d8085833e6103f78183610509565b8101908551818303126100c6578051908482116104ea57019181601f840112156100c65782519161042783610541565b946104358b51519687610509565b8386528751948580880195851b820101958387116104e6578101945b8686106104675750505050505050388080610283565b85518381116104e257820184603f820112156104e2578a51810151908e61048d83610541565b9261049b8251519485610509565b8084528d518401915180918a1b840101928884116104de5701905b8282106104ce57505050815289519586019501610451565b815181528d5191820191016104b6565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610228565b90601f8019910116810190811067ffffffffffffffff82111761052b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161052b5760051b60200190565b81601f820112156105b75780359161057083610541565b9261057e6040519485610509565b808452602092838086019260051b8201019283116105b7578301905b8282106105a8575050505090565b8135815290830190830161059a565b600080fd5b9080601f830112156105b7578135906105d482610541565b926105e26040519485610509565b828452602092838086019160051b830101928084116105b757848301915b8483106106105750505050505090565b823567ffffffffffffffff81116105b757869161063284848094890101610559565b815201920191610600565b6020908160408183019282815285518094520193019160005b828110610664575050505090565b835185529381019392810192600101610656565b9061068282610541565b61068f6040519182610509565b82815280926106a0601f1991610541565b0190602036910137565b60001981146106b95760010190565b634e487b7160e01b600052601160045260246000fd5b8051156106dc5760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106dc5760209160051b010190565b90633b9aca00918281029281840514901517156106b957565b818102929160008212600160ff1b8214166106b95781840514901517156106b957565b811561075d57600160ff1b81146000198314166106b9570590565b634e487b7160e01b600052601260045260246000fd5b919091600083820193841291129080158216911516176106b957565b818103929160001380158285131691841216176106b957565b909281518451036109fa576107c96107c2839695966106cf565b5151610678565b9460005b8281106107dd5750505050505090565b6107ea8498939851610678565b956107f76107c2866106cf565b6000936001955b875187101561089057878b8b9c9d869c999a9b9c9389945b61081f856106cf565b515186101561086c5761086061086691633b9aca008f610859906108528b61033361084a828d6106f2565b51938d6106f2565b519061071f565b0590610773565b956106aa565b94610816565b9250949961088394508b93509a6103ad919b6106f2565b95909a999897969a6107fe565b979198929499909395509995996001965b8b5188101561096a57908392916108d06108be8a8f9998976106f2565b516108c98b886106f2565b519061078f565b9960005b6108dd896106cf565b515181101561093b57808d6103ad828f8f8e61091a6109136109309461090d6109369b61033361092097876106f2565b5161071f565b9151610706565b90610742565b61092a83866106f2565b51610773565b926106f2565b6108d4565b50989b610956610962939b61095c9395969798995190610742565b90610773565b9a6106aa565b9697906108a1565b93919a99949596509796915060005b6109828a6106cf565b51518110156109c557806109b6633b9aca006109a58e6108526109c0968e6106f2565b056109b0838d6106f2565b5161078f565b6103ad828c6106f2565b610979565b50969794926109ec9199965093633b9aca006109e56109f294968961071f565b059061078f565b916106aa565b9490946107cd565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190825192610a6984610678565b93600090815b818310610a7f5750505050505090565b849597919293949281935b610a93876106cf565b5151851015610ad257610ac6610acc91633b9aca006108598a6108528f6103338d610abf8e80946106f2565b51946106f2565b946106aa565b93610a8a565b610ae9929695919450989692986103ad828a6106f2565b919093610a6f56fea2646970667358221220d93bab15c7a455b7f85b383a066cc1720846c31055c60f0509c3dd83d9493f5764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "params": {
          "X": "- The training features.",
          "y": "- The training labels."
        }
      },
      "predict(int256[][],int256,int256[])": {
        "params": {
          "X": "- The input features."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "notice": "Fits the linear regression model to the training data"
      },
      "predict(int256[][],int256,int256[])": {
        "notice": "Predicts the labels for the given input data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2549,
        "contract": "contracts/LinearRegression.sol:LinearRegression",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)1533"
      }
    ],
    "types": {
      "t_contract(DataLayer)1533": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      }
    }
  }
}